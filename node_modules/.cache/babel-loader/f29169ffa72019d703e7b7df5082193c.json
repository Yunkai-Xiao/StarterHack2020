{"ast":null,"code":"import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport React, { Children } from 'react';\nimport toArray from 'rc-util/es/Children/toArray';\nimport warning from 'warning';\nimport TreeNode from './TreeNode';\nvar DRAG_SIDE_RANGE = 0.25;\nvar DRAG_MIN_GAP = 2;\nvar onlyTreeNodeWarned = false;\nexport function warnOnlyTreeNode() {\n  if (onlyTreeNodeWarned) return;\n  onlyTreeNodeWarned = true;\n  warning(false, 'Tree only accept TreeNode as children.');\n}\nexport function arrDel(list, value) {\n  var clone = list.slice();\n  var index = clone.indexOf(value);\n\n  if (index >= 0) {\n    clone.splice(index, 1);\n  }\n\n  return clone;\n}\nexport function arrAdd(list, value) {\n  var clone = list.slice();\n\n  if (clone.indexOf(value) === -1) {\n    clone.push(value);\n  }\n\n  return clone;\n}\nexport function posToArr(pos) {\n  return pos.split('-');\n}\nexport function getPosition(level, index) {\n  return level + '-' + index;\n}\nexport function isTreeNode(node) {\n  return node && node.type && node.type.isTreeNode;\n}\nexport function getNodeChildren(children) {\n  return toArray(children).filter(isTreeNode);\n}\nexport function isCheckDisabled(node) {\n  var _ref = node.props || {},\n      disabled = _ref.disabled,\n      disableCheckbox = _ref.disableCheckbox;\n\n  return !!(disabled || disableCheckbox);\n}\nexport function traverseTreeNodes(treeNodes, callback) {\n  function processNode(node, index, parent) {\n    var children = node ? node.props.children : treeNodes;\n    var pos = node ? getPosition(parent.pos, index) : 0; // Filter children\n\n    var childList = getNodeChildren(children); // Process node if is not root\n\n    if (node) {\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: node.key || pos,\n        parentPos: parent.node ? parent.pos : null\n      };\n      callback(data);\n    } // Process children node\n\n\n    Children.forEach(childList, function (subNode, subIndex) {\n      processNode(subNode, subIndex, {\n        node: node,\n        pos: pos\n      });\n    });\n  }\n\n  processNode(null);\n}\n/**\n * Use `rc-util` `toArray` to get the children list which keeps the key.\n * And return single node if children is only one(This can avoid `key` missing check).\n */\n\nexport function mapChildren(children, func) {\n  var list = toArray(children).map(func);\n\n  if (list.length === 1) {\n    return list[0];\n  }\n\n  return list;\n}\nexport function getDragNodesKeys(treeNodes, node) {\n  var _node$props = node.props,\n      eventKey = _node$props.eventKey,\n      pos = _node$props.pos;\n  var dragNodesKeys = [];\n  traverseTreeNodes(treeNodes, function (_ref2) {\n    var key = _ref2.key;\n    dragNodesKeys.push(key);\n  });\n  dragNodesKeys.push(eventKey || pos);\n  return dragNodesKeys;\n} // Only used when drag, not affect SSR.\n\nexport function calcDropPosition(event, treeNode) {\n  var clientY = event.clientY;\n\n  var _treeNode$selectHandl = treeNode.selectHandle.getBoundingClientRect(),\n      top = _treeNode$selectHandl.top,\n      bottom = _treeNode$selectHandl.bottom,\n      height = _treeNode$selectHandl.height;\n\n  var des = Math.max(height * DRAG_SIDE_RANGE, DRAG_MIN_GAP);\n\n  if (clientY <= top + des) {\n    return -1;\n  } else if (clientY >= bottom - des) {\n    return 1;\n  }\n\n  return 0;\n}\n/**\n * Return selectedKeys according with multiple prop\n * @param selectedKeys\n * @param props\n * @returns [string]\n */\n\nexport function calcSelectedKeys(selectedKeys, props) {\n  if (!selectedKeys) return undefined;\n  var multiple = props.multiple;\n\n  if (multiple) {\n    return selectedKeys.slice();\n  }\n\n  if (selectedKeys.length) {\n    return [selectedKeys[0]];\n  }\n\n  return selectedKeys;\n}\n/**\n * Since React internal will convert key to string,\n * we need do this to avoid `checkStrictly` use number match\n */\n\nfunction keyListToString(keyList) {\n  if (!keyList) return keyList;\n  return keyList.map(function (key) {\n    return String(key);\n  });\n}\n\nvar internalProcessProps = function internalProcessProps(props) {\n  return props;\n};\n\nexport function convertDataToTree(treeData, processer) {\n  if (!treeData) return [];\n\n  var _ref3 = processer || {},\n      _ref3$processProps = _ref3.processProps,\n      processProps = _ref3$processProps === undefined ? internalProcessProps : _ref3$processProps;\n\n  var list = Array.isArray(treeData) ? treeData : [treeData];\n  return list.map(function (_ref4) {\n    var children = _ref4.children,\n        props = _objectWithoutProperties(_ref4, ['children']);\n\n    var childrenNodes = convertDataToTree(children, processer);\n    return React.createElement(TreeNode, processProps(props), childrenNodes);\n  });\n} // TODO: ========================= NEW LOGIC =========================\n\n/**\n * Calculate treeNodes entities. `processTreeEntity` is used for `rc-tree-select`\n * @param treeNodes\n * @param processTreeEntity  User can customize the entity\n */\n\nexport function convertTreeToEntities(treeNodes) {\n  var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref5.initWrapper,\n      processEntity = _ref5.processEntity,\n      onProcessFinished = _ref5.onProcessFinished;\n\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseTreeNodes(treeNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos\n    };\n    posEntities[pos] = entity;\n    keyEntities[key] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  });\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Parse `checkedKeys` to { checkedKeys, halfCheckedKeys } style\n */\n\nexport function parseCheckedKeys(keys) {\n  if (!keys) {\n    return null;\n  } // Convert keys to object format\n\n\n  var keyProps = void 0;\n\n  if (Array.isArray(keys)) {\n    // [Legacy] Follow the api doc\n    keyProps = {\n      checkedKeys: keys,\n      halfCheckedKeys: undefined\n    };\n  } else if (typeof keys === 'object') {\n    keyProps = {\n      checkedKeys: keys.checked || undefined,\n      halfCheckedKeys: keys.halfChecked || undefined\n    };\n  } else {\n    warning(false, '`checkedKeys` is not an array or an object');\n    return null;\n  }\n\n  keyProps.checkedKeys = keyListToString(keyProps.checkedKeys);\n  keyProps.halfCheckedKeys = keyListToString(keyProps.halfCheckedKeys);\n  return keyProps;\n}\n/**\n * Conduct check state by the keyList. It will conduct up & from the provided key.\n * If the conduct path reach the disabled or already checked / unchecked node will stop conduct.\n * @param keyList       list of keys\n * @param isCheck       is check the node or not\n * @param keyEntities   parsed by `convertTreeToEntities` function in Tree\n * @param checkStatus   Can pass current checked status for process (usually for uncheck operation)\n * @returns {{checkedKeys: [], halfCheckedKeys: []}}\n */\n\nexport function conductCheck(keyList, isCheck, keyEntities) {\n  var checkStatus = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var checkedKeys = {};\n  var halfCheckedKeys = {}; // Record the key has some child checked (include child half checked)\n\n  (checkStatus.checkedKeys || []).forEach(function (key) {\n    checkedKeys[key] = true;\n  });\n  (checkStatus.halfCheckedKeys || []).forEach(function (key) {\n    halfCheckedKeys[key] = true;\n  }); // Conduct up\n\n  function conductUp(key) {\n    if (checkedKeys[key] === isCheck) return;\n    var entity = keyEntities[key];\n    if (!entity) return;\n    var children = entity.children,\n        parent = entity.parent,\n        node = entity.node;\n    if (isCheckDisabled(node)) return; // Check child node checked status\n\n    var everyChildChecked = true;\n    var someChildChecked = false; // Child checked or half checked\n\n    (children || []).filter(function (child) {\n      return !isCheckDisabled(child.node);\n    }).forEach(function (_ref6) {\n      var childKey = _ref6.key;\n      var childChecked = checkedKeys[childKey];\n      var childHalfChecked = halfCheckedKeys[childKey];\n      if (childChecked || childHalfChecked) someChildChecked = true;\n      if (!childChecked) everyChildChecked = false;\n    }); // Update checked status\n\n    if (isCheck) {\n      checkedKeys[key] = everyChildChecked;\n    } else {\n      checkedKeys[key] = false;\n    }\n\n    halfCheckedKeys[key] = someChildChecked;\n\n    if (parent) {\n      conductUp(parent.key);\n    }\n  } // Conduct down\n\n\n  function conductDown(key) {\n    if (checkedKeys[key] === isCheck) return;\n    var entity = keyEntities[key];\n    if (!entity) return;\n    var children = entity.children,\n        node = entity.node;\n    if (isCheckDisabled(node)) return;\n    checkedKeys[key] = isCheck;\n    (children || []).forEach(function (child) {\n      conductDown(child.key);\n    });\n  }\n\n  function conduct(key) {\n    var entity = keyEntities[key];\n\n    if (!entity) {\n      warning(false, '\\'' + key + '\\' does not exist in the tree.');\n      return;\n    }\n\n    var children = entity.children,\n        parent = entity.parent,\n        node = entity.node;\n    checkedKeys[key] = isCheck;\n    if (isCheckDisabled(node)) return; // Conduct down\n\n    (children || []).filter(function (child) {\n      return !isCheckDisabled(child.node);\n    }).forEach(function (child) {\n      conductDown(child.key);\n    }); // Conduct up\n\n    if (parent) {\n      conductUp(parent.key);\n    }\n  }\n\n  (keyList || []).forEach(function (key) {\n    conduct(key);\n  });\n  var checkedKeyList = [];\n  var halfCheckedKeyList = []; // Fill checked list\n\n  Object.keys(checkedKeys).forEach(function (key) {\n    if (checkedKeys[key]) {\n      checkedKeyList.push(key);\n    }\n  }); // Fill half checked list\n\n  Object.keys(halfCheckedKeys).forEach(function (key) {\n    if (!checkedKeys[key] && halfCheckedKeys[key]) {\n      halfCheckedKeyList.push(key);\n    }\n  });\n  return {\n    checkedKeys: checkedKeyList,\n    halfCheckedKeys: halfCheckedKeyList\n  };\n}\n/**\n * If user use `autoExpandParent` we should get the list of parent node\n * @param keyList\n * @param keyEntities\n */\n\nexport function conductExpandParent(keyList, keyEntities) {\n  var expandedKeys = {};\n\n  function conductUp(key) {\n    if (expandedKeys[key]) return;\n    var entity = keyEntities[key];\n    if (!entity) return;\n    expandedKeys[key] = true;\n    var parent = entity.parent,\n        node = entity.node;\n    if (isCheckDisabled(node)) return;\n\n    if (parent) {\n      conductUp(parent.key);\n    }\n  }\n\n  (keyList || []).forEach(function (key) {\n    conductUp(key);\n  });\n  return Object.keys(expandedKeys);\n}\n/**\n * Returns only the data- and aria- key/value pairs\n * @param {object} props \n */\n\nexport function getDataAndAria(props) {\n  return Object.keys(props).reduce(function (prev, key) {\n    if (key.substr(0, 5) === 'data-' || key.substr(0, 5) === 'aria-') {\n      prev[key] = props[key];\n    }\n\n    return prev;\n  }, {});\n}","map":{"version":3,"sources":["/Users/SHAWN/Downloads/StudyMate2/node_modules/rc-tree/es/util.js"],"names":["_objectWithoutProperties","React","Children","toArray","warning","TreeNode","DRAG_SIDE_RANGE","DRAG_MIN_GAP","onlyTreeNodeWarned","warnOnlyTreeNode","arrDel","list","value","clone","slice","index","indexOf","splice","arrAdd","push","posToArr","pos","split","getPosition","level","isTreeNode","node","type","getNodeChildren","children","filter","isCheckDisabled","_ref","props","disabled","disableCheckbox","traverseTreeNodes","treeNodes","callback","processNode","parent","childList","data","key","parentPos","forEach","subNode","subIndex","mapChildren","func","map","length","getDragNodesKeys","_node$props","eventKey","dragNodesKeys","_ref2","calcDropPosition","event","treeNode","clientY","_treeNode$selectHandl","selectHandle","getBoundingClientRect","top","bottom","height","des","Math","max","calcSelectedKeys","selectedKeys","undefined","multiple","keyListToString","keyList","String","internalProcessProps","convertDataToTree","treeData","processer","_ref3","_ref3$processProps","processProps","Array","isArray","_ref4","childrenNodes","createElement","convertTreeToEntities","_ref5","arguments","initWrapper","processEntity","onProcessFinished","posEntities","keyEntities","wrapper","item","entity","parseCheckedKeys","keys","keyProps","checkedKeys","halfCheckedKeys","checked","halfChecked","conductCheck","isCheck","checkStatus","conductUp","everyChildChecked","someChildChecked","child","_ref6","childKey","childChecked","childHalfChecked","conductDown","conduct","checkedKeyList","halfCheckedKeyList","Object","conductExpandParent","expandedKeys","getDataAndAria","reduce","prev","substr"],"mappings":"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","sourcesContent":["import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport React, { Children } from 'react';\nimport toArray from 'rc-util/es/Children/toArray';\nimport warning from 'warning';\nimport TreeNode from './TreeNode';\n\nvar DRAG_SIDE_RANGE = 0.25;\nvar DRAG_MIN_GAP = 2;\n\nvar onlyTreeNodeWarned = false;\n\nexport function warnOnlyTreeNode() {\n  if (onlyTreeNodeWarned) return;\n\n  onlyTreeNodeWarned = true;\n  warning(false, 'Tree only accept TreeNode as children.');\n}\n\nexport function arrDel(list, value) {\n  var clone = list.slice();\n  var index = clone.indexOf(value);\n  if (index >= 0) {\n    clone.splice(index, 1);\n  }\n  return clone;\n}\n\nexport function arrAdd(list, value) {\n  var clone = list.slice();\n  if (clone.indexOf(value) === -1) {\n    clone.push(value);\n  }\n  return clone;\n}\n\nexport function posToArr(pos) {\n  return pos.split('-');\n}\n\nexport function getPosition(level, index) {\n  return level + '-' + index;\n}\n\nexport function isTreeNode(node) {\n  return node && node.type && node.type.isTreeNode;\n}\n\nexport function getNodeChildren(children) {\n  return toArray(children).filter(isTreeNode);\n}\n\nexport function isCheckDisabled(node) {\n  var _ref = node.props || {},\n      disabled = _ref.disabled,\n      disableCheckbox = _ref.disableCheckbox;\n\n  return !!(disabled || disableCheckbox);\n}\n\nexport function traverseTreeNodes(treeNodes, callback) {\n  function processNode(node, index, parent) {\n    var children = node ? node.props.children : treeNodes;\n    var pos = node ? getPosition(parent.pos, index) : 0;\n\n    // Filter children\n    var childList = getNodeChildren(children);\n\n    // Process node if is not root\n    if (node) {\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: node.key || pos,\n        parentPos: parent.node ? parent.pos : null\n      };\n\n      callback(data);\n    }\n\n    // Process children node\n    Children.forEach(childList, function (subNode, subIndex) {\n      processNode(subNode, subIndex, { node: node, pos: pos });\n    });\n  }\n\n  processNode(null);\n}\n\n/**\n * Use `rc-util` `toArray` to get the children list which keeps the key.\n * And return single node if children is only one(This can avoid `key` missing check).\n */\nexport function mapChildren(children, func) {\n  var list = toArray(children).map(func);\n  if (list.length === 1) {\n    return list[0];\n  }\n  return list;\n}\n\nexport function getDragNodesKeys(treeNodes, node) {\n  var _node$props = node.props,\n      eventKey = _node$props.eventKey,\n      pos = _node$props.pos;\n\n  var dragNodesKeys = [];\n\n  traverseTreeNodes(treeNodes, function (_ref2) {\n    var key = _ref2.key;\n\n    dragNodesKeys.push(key);\n  });\n  dragNodesKeys.push(eventKey || pos);\n  return dragNodesKeys;\n}\n\n// Only used when drag, not affect SSR.\nexport function calcDropPosition(event, treeNode) {\n  var clientY = event.clientY;\n\n  var _treeNode$selectHandl = treeNode.selectHandle.getBoundingClientRect(),\n      top = _treeNode$selectHandl.top,\n      bottom = _treeNode$selectHandl.bottom,\n      height = _treeNode$selectHandl.height;\n\n  var des = Math.max(height * DRAG_SIDE_RANGE, DRAG_MIN_GAP);\n\n  if (clientY <= top + des) {\n    return -1;\n  } else if (clientY >= bottom - des) {\n    return 1;\n  }\n\n  return 0;\n}\n\n/**\n * Return selectedKeys according with multiple prop\n * @param selectedKeys\n * @param props\n * @returns [string]\n */\nexport function calcSelectedKeys(selectedKeys, props) {\n  if (!selectedKeys) return undefined;\n\n  var multiple = props.multiple;\n\n  if (multiple) {\n    return selectedKeys.slice();\n  }\n\n  if (selectedKeys.length) {\n    return [selectedKeys[0]];\n  }\n  return selectedKeys;\n}\n\n/**\n * Since React internal will convert key to string,\n * we need do this to avoid `checkStrictly` use number match\n */\nfunction keyListToString(keyList) {\n  if (!keyList) return keyList;\n  return keyList.map(function (key) {\n    return String(key);\n  });\n}\n\nvar internalProcessProps = function internalProcessProps(props) {\n  return props;\n};\nexport function convertDataToTree(treeData, processer) {\n  if (!treeData) return [];\n\n  var _ref3 = processer || {},\n      _ref3$processProps = _ref3.processProps,\n      processProps = _ref3$processProps === undefined ? internalProcessProps : _ref3$processProps;\n\n  var list = Array.isArray(treeData) ? treeData : [treeData];\n  return list.map(function (_ref4) {\n    var children = _ref4.children,\n        props = _objectWithoutProperties(_ref4, ['children']);\n\n    var childrenNodes = convertDataToTree(children, processer);\n\n    return React.createElement(\n      TreeNode,\n      processProps(props),\n      childrenNodes\n    );\n  });\n}\n\n// TODO: ========================= NEW LOGIC =========================\n/**\n * Calculate treeNodes entities. `processTreeEntity` is used for `rc-tree-select`\n * @param treeNodes\n * @param processTreeEntity  User can customize the entity\n */\nexport function convertTreeToEntities(treeNodes) {\n  var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref5.initWrapper,\n      processEntity = _ref5.processEntity,\n      onProcessFinished = _ref5.onProcessFinished;\n\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseTreeNodes(treeNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos;\n\n    var entity = { node: node, index: index, key: key, pos: pos };\n\n    posEntities[pos] = entity;\n    keyEntities[key] = entity;\n\n    // Fill children\n    entity.parent = posEntities[parentPos];\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  });\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n\n/**\n * Parse `checkedKeys` to { checkedKeys, halfCheckedKeys } style\n */\nexport function parseCheckedKeys(keys) {\n  if (!keys) {\n    return null;\n  }\n\n  // Convert keys to object format\n  var keyProps = void 0;\n  if (Array.isArray(keys)) {\n    // [Legacy] Follow the api doc\n    keyProps = {\n      checkedKeys: keys,\n      halfCheckedKeys: undefined\n    };\n  } else if (typeof keys === 'object') {\n    keyProps = {\n      checkedKeys: keys.checked || undefined,\n      halfCheckedKeys: keys.halfChecked || undefined\n    };\n  } else {\n    warning(false, '`checkedKeys` is not an array or an object');\n    return null;\n  }\n\n  keyProps.checkedKeys = keyListToString(keyProps.checkedKeys);\n  keyProps.halfCheckedKeys = keyListToString(keyProps.halfCheckedKeys);\n\n  return keyProps;\n}\n\n/**\n * Conduct check state by the keyList. It will conduct up & from the provided key.\n * If the conduct path reach the disabled or already checked / unchecked node will stop conduct.\n * @param keyList       list of keys\n * @param isCheck       is check the node or not\n * @param keyEntities   parsed by `convertTreeToEntities` function in Tree\n * @param checkStatus   Can pass current checked status for process (usually for uncheck operation)\n * @returns {{checkedKeys: [], halfCheckedKeys: []}}\n */\nexport function conductCheck(keyList, isCheck, keyEntities) {\n  var checkStatus = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  var checkedKeys = {};\n  var halfCheckedKeys = {}; // Record the key has some child checked (include child half checked)\n\n  (checkStatus.checkedKeys || []).forEach(function (key) {\n    checkedKeys[key] = true;\n  });\n\n  (checkStatus.halfCheckedKeys || []).forEach(function (key) {\n    halfCheckedKeys[key] = true;\n  });\n\n  // Conduct up\n  function conductUp(key) {\n    if (checkedKeys[key] === isCheck) return;\n\n    var entity = keyEntities[key];\n    if (!entity) return;\n\n    var children = entity.children,\n        parent = entity.parent,\n        node = entity.node;\n\n\n    if (isCheckDisabled(node)) return;\n\n    // Check child node checked status\n    var everyChildChecked = true;\n    var someChildChecked = false; // Child checked or half checked\n\n    (children || []).filter(function (child) {\n      return !isCheckDisabled(child.node);\n    }).forEach(function (_ref6) {\n      var childKey = _ref6.key;\n\n      var childChecked = checkedKeys[childKey];\n      var childHalfChecked = halfCheckedKeys[childKey];\n\n      if (childChecked || childHalfChecked) someChildChecked = true;\n      if (!childChecked) everyChildChecked = false;\n    });\n\n    // Update checked status\n    if (isCheck) {\n      checkedKeys[key] = everyChildChecked;\n    } else {\n      checkedKeys[key] = false;\n    }\n    halfCheckedKeys[key] = someChildChecked;\n\n    if (parent) {\n      conductUp(parent.key);\n    }\n  }\n\n  // Conduct down\n  function conductDown(key) {\n    if (checkedKeys[key] === isCheck) return;\n\n    var entity = keyEntities[key];\n    if (!entity) return;\n\n    var children = entity.children,\n        node = entity.node;\n\n\n    if (isCheckDisabled(node)) return;\n\n    checkedKeys[key] = isCheck;\n\n    (children || []).forEach(function (child) {\n      conductDown(child.key);\n    });\n  }\n\n  function conduct(key) {\n    var entity = keyEntities[key];\n\n    if (!entity) {\n      warning(false, '\\'' + key + '\\' does not exist in the tree.');\n      return;\n    }\n\n    var children = entity.children,\n        parent = entity.parent,\n        node = entity.node;\n\n    checkedKeys[key] = isCheck;\n\n    if (isCheckDisabled(node)) return;\n\n    // Conduct down\n    (children || []).filter(function (child) {\n      return !isCheckDisabled(child.node);\n    }).forEach(function (child) {\n      conductDown(child.key);\n    });\n\n    // Conduct up\n    if (parent) {\n      conductUp(parent.key);\n    }\n  }\n\n  (keyList || []).forEach(function (key) {\n    conduct(key);\n  });\n\n  var checkedKeyList = [];\n  var halfCheckedKeyList = [];\n\n  // Fill checked list\n  Object.keys(checkedKeys).forEach(function (key) {\n    if (checkedKeys[key]) {\n      checkedKeyList.push(key);\n    }\n  });\n\n  // Fill half checked list\n  Object.keys(halfCheckedKeys).forEach(function (key) {\n    if (!checkedKeys[key] && halfCheckedKeys[key]) {\n      halfCheckedKeyList.push(key);\n    }\n  });\n\n  return {\n    checkedKeys: checkedKeyList,\n    halfCheckedKeys: halfCheckedKeyList\n  };\n}\n\n/**\n * If user use `autoExpandParent` we should get the list of parent node\n * @param keyList\n * @param keyEntities\n */\nexport function conductExpandParent(keyList, keyEntities) {\n  var expandedKeys = {};\n\n  function conductUp(key) {\n    if (expandedKeys[key]) return;\n\n    var entity = keyEntities[key];\n    if (!entity) return;\n\n    expandedKeys[key] = true;\n\n    var parent = entity.parent,\n        node = entity.node;\n\n\n    if (isCheckDisabled(node)) return;\n\n    if (parent) {\n      conductUp(parent.key);\n    }\n  }\n\n  (keyList || []).forEach(function (key) {\n    conductUp(key);\n  });\n\n  return Object.keys(expandedKeys);\n}\n\n/**\n * Returns only the data- and aria- key/value pairs\n * @param {object} props \n */\nexport function getDataAndAria(props) {\n  return Object.keys(props).reduce(function (prev, key) {\n    if (key.substr(0, 5) === 'data-' || key.substr(0, 5) === 'aria-') {\n      prev[key] = props[key];\n    }\n    return prev;\n  }, {});\n}"]},"metadata":{},"sourceType":"module"}