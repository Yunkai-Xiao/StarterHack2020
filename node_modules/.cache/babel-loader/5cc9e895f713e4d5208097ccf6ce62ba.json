{"ast":null,"code":"import { getNodeChildren, convertTreeToEntities } from \"rc-tree/es/util\";\nvar Record;\n\n(function (Record) {\n  Record[Record[\"None\"] = 0] = \"None\";\n  Record[Record[\"Start\"] = 1] = \"Start\";\n  Record[Record[\"End\"] = 2] = \"End\";\n})(Record || (Record = {})); // TODO: Move this logic into `rc-tree`\n\n\nfunction traverseNodesKey(rootChildren, callback) {\n  var nodeList = getNodeChildren(rootChildren) || [];\n\n  function processNode(node) {\n    var key = node.key,\n        children = node.props.children;\n\n    if (callback(key) !== false) {\n      traverseNodesKey(children, callback);\n    }\n  }\n\n  nodeList.forEach(processNode);\n}\n\nexport function getFullKeyList(children) {\n  var _convertTreeToEntitie = convertTreeToEntities(children),\n      keyEntities = _convertTreeToEntitie.keyEntities;\n\n  return Object.keys(keyEntities);\n}\n/** 计算选中范围，只考虑expanded情况以优化性能 */\n\nexport function calcRangeKeys(rootChildren, expandedKeys, startKey, endKey) {\n  var keys = [];\n  var record = Record.None;\n\n  if (startKey && startKey === endKey) {\n    return [startKey];\n  }\n\n  if (!startKey || !endKey) {\n    return [];\n  }\n\n  function matchKey(key) {\n    return key === startKey || key === endKey;\n  }\n\n  traverseNodesKey(rootChildren, function (key) {\n    if (record === Record.End) {\n      return false;\n    }\n\n    if (matchKey(key)) {\n      // Match test\n      keys.push(key);\n\n      if (record === Record.None) {\n        record = Record.Start;\n      } else if (record === Record.Start) {\n        record = Record.End;\n        return false;\n      }\n    } else if (record === Record.Start) {\n      // Append selection\n      keys.push(key);\n    }\n\n    if (expandedKeys.indexOf(key) === -1) {\n      return false;\n    }\n\n    return true;\n  });\n  return keys;\n}","map":{"version":3,"sources":["/Users/SHAWN/Downloads/StudyMate2/node_modules/antd/es/tree/util.js"],"names":["getNodeChildren","convertTreeToEntities","Record","traverseNodesKey","rootChildren","callback","nodeList","processNode","node","key","children","props","forEach","getFullKeyList","_convertTreeToEntitie","keyEntities","Object","keys","calcRangeKeys","expandedKeys","startKey","endKey","record","None","matchKey","End","push","Start","indexOf"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,qBAA1B,QAAuD,iBAAvD;AACA,IAAIC,MAAJ;;AAEA,CAAC,UAAUA,MAAV,EAAkB;AACjBA,EAAAA,MAAM,CAACA,MAAM,CAAC,MAAD,CAAN,GAAiB,CAAlB,CAAN,GAA6B,MAA7B;AACAA,EAAAA,MAAM,CAACA,MAAM,CAAC,OAAD,CAAN,GAAkB,CAAnB,CAAN,GAA8B,OAA9B;AACAA,EAAAA,MAAM,CAACA,MAAM,CAAC,KAAD,CAAN,GAAgB,CAAjB,CAAN,GAA4B,KAA5B;AACD,CAJD,EAIGA,MAAM,KAAKA,MAAM,GAAG,EAAd,CAJT,E,CAI6B;;;AAG7B,SAASC,gBAAT,CAA0BC,YAA1B,EAAwCC,QAAxC,EAAkD;AAChD,MAAIC,QAAQ,GAAGN,eAAe,CAACI,YAAD,CAAf,IAAiC,EAAhD;;AAEA,WAASG,WAAT,CAAqBC,IAArB,EAA2B;AACzB,QAAIC,GAAG,GAAGD,IAAI,CAACC,GAAf;AAAA,QACIC,QAAQ,GAAGF,IAAI,CAACG,KAAL,CAAWD,QAD1B;;AAGA,QAAIL,QAAQ,CAACI,GAAD,CAAR,KAAkB,KAAtB,EAA6B;AAC3BN,MAAAA,gBAAgB,CAACO,QAAD,EAAWL,QAAX,CAAhB;AACD;AACF;;AAEDC,EAAAA,QAAQ,CAACM,OAAT,CAAiBL,WAAjB;AACD;;AAED,OAAO,SAASM,cAAT,CAAwBH,QAAxB,EAAkC;AACvC,MAAII,qBAAqB,GAAGb,qBAAqB,CAACS,QAAD,CAAjD;AAAA,MACIK,WAAW,GAAGD,qBAAqB,CAACC,WADxC;;AAGA,SAAOC,MAAM,CAACC,IAAP,CAAYF,WAAZ,CAAP;AACD;AACD;;AAEA,OAAO,SAASG,aAAT,CAAuBd,YAAvB,EAAqCe,YAArC,EAAmDC,QAAnD,EAA6DC,MAA7D,EAAqE;AAC1E,MAAIJ,IAAI,GAAG,EAAX;AACA,MAAIK,MAAM,GAAGpB,MAAM,CAACqB,IAApB;;AAEA,MAAIH,QAAQ,IAAIA,QAAQ,KAAKC,MAA7B,EAAqC;AACnC,WAAO,CAACD,QAAD,CAAP;AACD;;AAED,MAAI,CAACA,QAAD,IAAa,CAACC,MAAlB,EAA0B;AACxB,WAAO,EAAP;AACD;;AAED,WAASG,QAAT,CAAkBf,GAAlB,EAAuB;AACrB,WAAOA,GAAG,KAAKW,QAAR,IAAoBX,GAAG,KAAKY,MAAnC;AACD;;AAEDlB,EAAAA,gBAAgB,CAACC,YAAD,EAAe,UAAUK,GAAV,EAAe;AAC5C,QAAIa,MAAM,KAAKpB,MAAM,CAACuB,GAAtB,EAA2B;AACzB,aAAO,KAAP;AACD;;AAED,QAAID,QAAQ,CAACf,GAAD,CAAZ,EAAmB;AACjB;AACAQ,MAAAA,IAAI,CAACS,IAAL,CAAUjB,GAAV;;AAEA,UAAIa,MAAM,KAAKpB,MAAM,CAACqB,IAAtB,EAA4B;AAC1BD,QAAAA,MAAM,GAAGpB,MAAM,CAACyB,KAAhB;AACD,OAFD,MAEO,IAAIL,MAAM,KAAKpB,MAAM,CAACyB,KAAtB,EAA6B;AAClCL,QAAAA,MAAM,GAAGpB,MAAM,CAACuB,GAAhB;AACA,eAAO,KAAP;AACD;AACF,KAVD,MAUO,IAAIH,MAAM,KAAKpB,MAAM,CAACyB,KAAtB,EAA6B;AAClC;AACAV,MAAAA,IAAI,CAACS,IAAL,CAAUjB,GAAV;AACD;;AAED,QAAIU,YAAY,CAACS,OAAb,CAAqBnB,GAArB,MAA8B,CAAC,CAAnC,EAAsC;AACpC,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD,GAzBe,CAAhB;AA0BA,SAAOQ,IAAP;AACD","sourcesContent":["import { getNodeChildren, convertTreeToEntities } from \"rc-tree/es/util\";\nvar Record;\n\n(function (Record) {\n  Record[Record[\"None\"] = 0] = \"None\";\n  Record[Record[\"Start\"] = 1] = \"Start\";\n  Record[Record[\"End\"] = 2] = \"End\";\n})(Record || (Record = {})); // TODO: Move this logic into `rc-tree`\n\n\nfunction traverseNodesKey(rootChildren, callback) {\n  var nodeList = getNodeChildren(rootChildren) || [];\n\n  function processNode(node) {\n    var key = node.key,\n        children = node.props.children;\n\n    if (callback(key) !== false) {\n      traverseNodesKey(children, callback);\n    }\n  }\n\n  nodeList.forEach(processNode);\n}\n\nexport function getFullKeyList(children) {\n  var _convertTreeToEntitie = convertTreeToEntities(children),\n      keyEntities = _convertTreeToEntitie.keyEntities;\n\n  return Object.keys(keyEntities);\n}\n/** 计算选中范围，只考虑expanded情况以优化性能 */\n\nexport function calcRangeKeys(rootChildren, expandedKeys, startKey, endKey) {\n  var keys = [];\n  var record = Record.None;\n\n  if (startKey && startKey === endKey) {\n    return [startKey];\n  }\n\n  if (!startKey || !endKey) {\n    return [];\n  }\n\n  function matchKey(key) {\n    return key === startKey || key === endKey;\n  }\n\n  traverseNodesKey(rootChildren, function (key) {\n    if (record === Record.End) {\n      return false;\n    }\n\n    if (matchKey(key)) {\n      // Match test\n      keys.push(key);\n\n      if (record === Record.None) {\n        record = Record.Start;\n      } else if (record === Record.Start) {\n        record = Record.End;\n        return false;\n      }\n    } else if (record === Record.Start) {\n      // Append selection\n      keys.push(key);\n    }\n\n    if (expandedKeys.indexOf(key) === -1) {\n      return false;\n    }\n\n    return true;\n  });\n  return keys;\n}"]},"metadata":{},"sourceType":"module"}