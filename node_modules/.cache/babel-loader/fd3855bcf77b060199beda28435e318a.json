{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport utils from '../utils';\nimport doAlign from './align';\n/**\n * `tgtPoint`: { pageX, pageY } or { clientX, clientY }.\n * If client position provided, will internal convert to page position.\n */\n\nfunction alignPoint(el, tgtPoint, align) {\n  var pageX = void 0;\n  var pageY = void 0;\n  var doc = utils.getDocument(el);\n  var win = doc.defaultView || doc.parentWindow;\n  var scrollX = utils.getWindowScrollLeft(win);\n  var scrollY = utils.getWindowScrollTop(win);\n  var viewportWidth = utils.viewportWidth(win);\n  var viewportHeight = utils.viewportHeight(win);\n\n  if ('pageX' in tgtPoint) {\n    pageX = tgtPoint.pageX;\n  } else {\n    pageX = scrollX + tgtPoint.clientX;\n  }\n\n  if ('pageY' in tgtPoint) {\n    pageY = tgtPoint.pageY;\n  } else {\n    pageY = scrollY + tgtPoint.clientY;\n  }\n\n  var tgtRegion = {\n    left: pageX,\n    top: pageY,\n    width: 0,\n    height: 0\n  };\n  var pointInView = pageX >= 0 && pageX <= scrollX + viewportWidth && pageY >= 0 && pageY <= scrollY + viewportHeight; // Provide default target point\n\n  var points = [align.points[0], 'cc'];\n  return doAlign(el, tgtRegion, _extends({}, align, {\n    points: points\n  }), pointInView);\n}\n\nexport default alignPoint;","map":{"version":3,"sources":["/Users/SHAWN/Downloads/StudyMate2/node_modules/dom-align/es/align/alignPoint.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","utils","doAlign","alignPoint","el","tgtPoint","align","pageX","pageY","doc","getDocument","win","defaultView","parentWindow","scrollX","getWindowScrollLeft","scrollY","getWindowScrollTop","viewportWidth","viewportHeight","clientX","clientY","tgtRegion","left","top","width","height","pointInView","points"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,SAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,UAAIN,MAAM,CAACQ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,QAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,SAAOL,MAAP;AAAgB,CAAhQ;;AAEA,OAAOS,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA;;;;;AAKA,SAASC,UAAT,CAAoBC,EAApB,EAAwBC,QAAxB,EAAkCC,KAAlC,EAAyC;AACvC,MAAIC,KAAK,GAAG,KAAK,CAAjB;AACA,MAAIC,KAAK,GAAG,KAAK,CAAjB;AAEA,MAAIC,GAAG,GAAGR,KAAK,CAACS,WAAN,CAAkBN,EAAlB,CAAV;AACA,MAAIO,GAAG,GAAGF,GAAG,CAACG,WAAJ,IAAmBH,GAAG,CAACI,YAAjC;AAEA,MAAIC,OAAO,GAAGb,KAAK,CAACc,mBAAN,CAA0BJ,GAA1B,CAAd;AACA,MAAIK,OAAO,GAAGf,KAAK,CAACgB,kBAAN,CAAyBN,GAAzB,CAAd;AACA,MAAIO,aAAa,GAAGjB,KAAK,CAACiB,aAAN,CAAoBP,GAApB,CAApB;AACA,MAAIQ,cAAc,GAAGlB,KAAK,CAACkB,cAAN,CAAqBR,GAArB,CAArB;;AAEA,MAAI,WAAWN,QAAf,EAAyB;AACvBE,IAAAA,KAAK,GAAGF,QAAQ,CAACE,KAAjB;AACD,GAFD,MAEO;AACLA,IAAAA,KAAK,GAAGO,OAAO,GAAGT,QAAQ,CAACe,OAA3B;AACD;;AAED,MAAI,WAAWf,QAAf,EAAyB;AACvBG,IAAAA,KAAK,GAAGH,QAAQ,CAACG,KAAjB;AACD,GAFD,MAEO;AACLA,IAAAA,KAAK,GAAGQ,OAAO,GAAGX,QAAQ,CAACgB,OAA3B;AACD;;AAED,MAAIC,SAAS,GAAG;AACdC,IAAAA,IAAI,EAAEhB,KADQ;AAEdiB,IAAAA,GAAG,EAAEhB,KAFS;AAGdiB,IAAAA,KAAK,EAAE,CAHO;AAIdC,IAAAA,MAAM,EAAE;AAJM,GAAhB;AAOA,MAAIC,WAAW,GAAGpB,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAIO,OAAO,GAAGI,aAAjC,IAAkDV,KAAK,IAAI,CAA3D,IAAgEA,KAAK,IAAIQ,OAAO,GAAGG,cAArG,CA/BuC,CAiCvC;;AACA,MAAIS,MAAM,GAAG,CAACtB,KAAK,CAACsB,MAAN,CAAa,CAAb,CAAD,EAAkB,IAAlB,CAAb;AAEA,SAAO1B,OAAO,CAACE,EAAD,EAAKkB,SAAL,EAAgBjC,QAAQ,CAAC,EAAD,EAAKiB,KAAL,EAAY;AAAEsB,IAAAA,MAAM,EAAEA;AAAV,GAAZ,CAAxB,EAAyDD,WAAzD,CAAd;AACD;;AAED,eAAexB,UAAf","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport utils from '../utils';\nimport doAlign from './align';\n\n/**\n * `tgtPoint`: { pageX, pageY } or { clientX, clientY }.\n * If client position provided, will internal convert to page position.\n */\n\nfunction alignPoint(el, tgtPoint, align) {\n  var pageX = void 0;\n  var pageY = void 0;\n\n  var doc = utils.getDocument(el);\n  var win = doc.defaultView || doc.parentWindow;\n\n  var scrollX = utils.getWindowScrollLeft(win);\n  var scrollY = utils.getWindowScrollTop(win);\n  var viewportWidth = utils.viewportWidth(win);\n  var viewportHeight = utils.viewportHeight(win);\n\n  if ('pageX' in tgtPoint) {\n    pageX = tgtPoint.pageX;\n  } else {\n    pageX = scrollX + tgtPoint.clientX;\n  }\n\n  if ('pageY' in tgtPoint) {\n    pageY = tgtPoint.pageY;\n  } else {\n    pageY = scrollY + tgtPoint.clientY;\n  }\n\n  var tgtRegion = {\n    left: pageX,\n    top: pageY,\n    width: 0,\n    height: 0\n  };\n\n  var pointInView = pageX >= 0 && pageX <= scrollX + viewportWidth && pageY >= 0 && pageY <= scrollY + viewportHeight;\n\n  // Provide default target point\n  var points = [align.points[0], 'cc'];\n\n  return doAlign(el, tgtRegion, _extends({}, align, { points: points }), pointInView);\n}\n\nexport default alignPoint;"]},"metadata":{},"sourceType":"module"}