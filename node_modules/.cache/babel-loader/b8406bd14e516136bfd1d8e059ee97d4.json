{"ast":null,"code":"import _classCallCheck from \"/Users/SHAWN/Downloads/google-maps-component/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/SHAWN/Downloads/google-maps-component/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/SHAWN/Downloads/google-maps-component/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/SHAWN/Downloads/google-maps-component/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/SHAWN/Downloads/google-maps-component/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/SHAWN/Downloads/google-maps-component/src/components/MapAutoComplete.js\";\nimport React, { Component } from 'react';\nimport { AutoComplete } from 'antd';\n\nvar MapAutoComplete =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapAutoComplete, _Component);\n\n  function MapAutoComplete(props) {\n    var _this;\n\n    _classCallCheck(this, MapAutoComplete);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapAutoComplete).call(this, props));\n\n    _this.onSelect = function (value) {\n      _this.state.geoCoderService.geocode({\n        address: value\n      }, function (response) {\n        var location = response[0].geometry.location;\n\n        _this.props.addMarker(location.lat(), location.lng(), _this.props.markerName);\n      });\n    };\n\n    _this.handleSearch = function (value) {\n      var _this$state = _this.state,\n          autoCompleteService = _this$state.autoCompleteService,\n          singaporeLatLng = _this$state.singaporeLatLng; // Search only if there is a string\n\n      if (value.length > 0) {\n        var searchQuery = {\n          input: value,\n          location: singaporeLatLng,\n          // Search in Singapore\n          radius: 30000 // With a 30km radius\n\n        };\n        autoCompleteService.getQueryPredictions(searchQuery, function (response) {\n          // The name of each GoogleMaps suggestion object is in the \"description\" field\n          if (response) {\n            var dataSource = response.map(function (resp) {\n              return resp.description;\n            });\n\n            _this.setState({\n              dataSource: dataSource,\n              suggestions: response\n            });\n          }\n        });\n      }\n    };\n\n    _this.state = {\n      suggestionts: [],\n      dataSource: [],\n      singaporeLatLng: _this.props.singaporeLatLng,\n      autoCompleteService: _this.props.autoCompleteService,\n      geoCoderService: _this.props.geoCoderService\n    };\n    return _this;\n  } // Runs after clicking away from the input field or pressing 'enter'.\n  // Geocode the location selected to be created as a marker.\n\n\n  _createClass(MapAutoComplete, [{\n    key: \"render\",\n    value: function render() {\n      var dataSource = this.state.dataSource;\n      return React.createElement(AutoComplete, {\n        className: \"w-100\",\n        dataSource: dataSource,\n        onSelect: this.onSelect,\n        onSearch: this.handleSearch,\n        placeholder: \"Address\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return MapAutoComplete;\n}(Component);\n\nexport default MapAutoComplete;","map":{"version":3,"sources":["/Users/SHAWN/Downloads/google-maps-component/src/components/MapAutoComplete.js"],"names":["React","Component","AutoComplete","MapAutoComplete","props","onSelect","value","state","geoCoderService","geocode","address","response","location","geometry","addMarker","lat","lng","markerName","handleSearch","autoCompleteService","singaporeLatLng","length","searchQuery","input","radius","getQueryPredictions","dataSource","map","resp","description","setState","suggestions","suggestionts"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,YAAT,QAA6B,MAA7B;;IAEMC,e;;;;;AACJ,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,yFAAMA,KAAN;;AADiB,UAanBC,QAbmB,GAaP,UAACC,KAAD,EAAW;AACrB,YAAKC,KAAL,CAAWC,eAAX,CAA2BC,OAA3B,CAAmC;AAAEC,QAAAA,OAAO,EAAEJ;AAAX,OAAnC,EAAwD,UAACK,QAAD,EAAc;AAAA,YAC5DC,QAD4D,GAC/CD,QAAQ,CAAC,CAAD,CAAR,CAAYE,QADmC,CAC5DD,QAD4D;;AAEpE,cAAKR,KAAL,CAAWU,SAAX,CAAqBF,QAAQ,CAACG,GAAT,EAArB,EAAqCH,QAAQ,CAACI,GAAT,EAArC,EAAqD,MAAKZ,KAAL,CAAWa,UAAhE;AACD,OAHD;AAID,KAlBkB;;AAAA,UAsBnBC,YAtBmB,GAsBH,UAACZ,KAAD,EAAW;AAAA,wBACwB,MAAKC,KAD7B;AAAA,UACjBY,mBADiB,eACjBA,mBADiB;AAAA,UACIC,eADJ,eACIA,eADJ,EAEzB;;AACA,UAAId,KAAK,CAACe,MAAN,GAAe,CAAnB,EAAsB;AACpB,YAAMC,WAAW,GAAG;AAClBC,UAAAA,KAAK,EAAEjB,KADW;AAElBM,UAAAA,QAAQ,EAAEQ,eAFQ;AAES;AAC3BI,UAAAA,MAAM,EAAE,KAHU,CAGH;;AAHG,SAApB;AAKAL,QAAAA,mBAAmB,CAACM,mBAApB,CAAwCH,WAAxC,EAAsD,UAACX,QAAD,EAAc;AAClE;AACA,cAAIA,QAAJ,EAAc;AACZ,gBAAMe,UAAU,GAAGf,QAAQ,CAACgB,GAAT,CAAa,UAACC,IAAD;AAAA,qBAAUA,IAAI,CAACC,WAAf;AAAA,aAAb,CAAnB;;AACA,kBAAKC,QAAL,CAAc;AAAEJ,cAAAA,UAAU,EAAVA,UAAF;AAAcK,cAAAA,WAAW,EAAEpB;AAA3B,aAAd;AACD;AACF,SAND;AAOD;AACF,KAvCkB;;AAEjB,UAAKJ,KAAL,GAAa;AACXyB,MAAAA,YAAY,EAAE,EADH;AAEXN,MAAAA,UAAU,EAAE,EAFD;AAGXN,MAAAA,eAAe,EAAE,MAAKhB,KAAL,CAAWgB,eAHjB;AAIXD,MAAAA,mBAAmB,EAAE,MAAKf,KAAL,CAAWe,mBAJrB;AAKXX,MAAAA,eAAe,EAAE,MAAKJ,KAAL,CAAWI;AALjB,KAAb;AAFiB;AASlB,G,CAED;AACA;;;;;6BA6BS;AAAA,UACCkB,UADD,GACgB,KAAKnB,KADrB,CACCmB,UADD;AAEP,aACE,oBAAC,YAAD;AACE,QAAA,SAAS,EAAC,OADZ;AAEE,QAAA,UAAU,EAAEA,UAFd;AAGE,QAAA,QAAQ,EAAE,KAAKrB,QAHjB;AAIE,QAAA,QAAQ,EAAE,KAAKa,YAJjB;AAKE,QAAA,WAAW,EAAC,SALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AASD;;;;EArD2BjB,S;;AAwD9B,eAAeE,eAAf","sourcesContent":["import React, { Component } from 'react';\nimport { AutoComplete } from 'antd';\n\nclass MapAutoComplete extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      suggestionts: [],\n      dataSource: [],\n      singaporeLatLng: this.props.singaporeLatLng,\n      autoCompleteService: this.props.autoCompleteService,\n      geoCoderService: this.props.geoCoderService,\n    }\n  }\n\n  // Runs after clicking away from the input field or pressing 'enter'.\n  // Geocode the location selected to be created as a marker.\n  onSelect = ((value) => {\n    this.state.geoCoderService.geocode({ address: value }, ((response) => {\n      const { location } = response[0].geometry;\n      this.props.addMarker(location.lat(), location.lng(), this.props.markerName);\n    }))\n  });\n\n\n  // Runs a search on the current value as the user types in the AutoComplete field.\n  handleSearch = ((value) => {\n    const { autoCompleteService, singaporeLatLng } = this.state;\n    // Search only if there is a string\n    if (value.length > 0) {\n      const searchQuery = {\n        input: value,\n        location: singaporeLatLng, // Search in Singapore\n        radius: 30000, // With a 30km radius\n      };\n      autoCompleteService.getQueryPredictions(searchQuery, ((response) => {\n        // The name of each GoogleMaps suggestion object is in the \"description\" field\n        if (response) {\n          const dataSource = response.map((resp) => resp.description);\n          this.setState({ dataSource, suggestions: response });\n        }\n      }));\n    }\n  });\n\n  render() {\n    const { dataSource } = this.state;\n    return (\n      <AutoComplete\n        className=\"w-100\"\n        dataSource={dataSource}\n        onSelect={this.onSelect}\n        onSearch={this.handleSearch}\n        placeholder=\"Address\"\n      />\n    );\n  }\n}\n\nexport default MapAutoComplete;"]},"metadata":{},"sourceType":"module"}