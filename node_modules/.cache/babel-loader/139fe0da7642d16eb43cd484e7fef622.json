{"ast":null,"code":"import _classCallCheck from \"/Users/SHAWN/Downloads/StudyMate2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/SHAWN/Downloads/StudyMate2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/SHAWN/Downloads/StudyMate2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/SHAWN/Downloads/StudyMate2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/SHAWN/Downloads/StudyMate2/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/SHAWN/Downloads/StudyMate2/src/containers/MapContainer.js\";\nimport React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport MapAutoComplete from '../components/MapAutoComplete';\nimport MapMarker from '../components/MapMarker';\nimport PlaceCard from '../components/PlaceCard';\nimport ConstraintSlider from '../components/ConstraintSlider';\nimport { Button, Input, Divider, message } from 'antd';\nvar SG_COOR = {\n  lat: 1.3521,\n  lng: 103.8198\n};\n\nvar MapsContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapsContainer, _Component);\n\n  function MapsContainer(props) {\n    var _this;\n\n    _classCallCheck(this, MapsContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapsContainer).call(this, props));\n\n    _this.updateConstraintName = function (event, key) {\n      event.preventDefault();\n      var prevConstraints = _this.state.constraints;\n      var constraints = Object.assign([], prevConstraints);\n      constraints[key].name = event.target.value;\n\n      _this.setState({\n        constraints: constraints\n      });\n    };\n\n    _this.updateConstraintTime = function (key, value) {\n      var prevConstraints = _this.state.constraints;\n      var constraints = Object.assign([], prevConstraints);\n      constraints[key].time = value;\n\n      _this.setState({\n        constraints: constraints\n      });\n    };\n\n    _this.addMarker = function (lat, lng, name) {\n      var prevMarkers = _this.state.markers;\n      var markers = Object.assign([], prevMarkers); // If name already exists in marker list just replace lat & lng.\n\n      var newMarker = true;\n\n      for (var i = 0; i < markers.length; i++) {\n        if (markers[i].name === name) {\n          newMarker = false;\n          markers[i].lat = lat;\n          markers[i].lng = lng;\n          message.success(\"Updated \\\"\".concat(name, \"\\\" Marker\"));\n          break;\n        }\n      } // Name does not exist in marker list. Create new marker\n\n\n      if (newMarker) {\n        markers.push({\n          lat: lat,\n          lng: lng,\n          name: name\n        });\n        message.success(\"Added new \\\"\".concat(name, \"\\\" Marker\"));\n      }\n\n      _this.setState({\n        markers: markers\n      });\n    };\n\n    _this.apiHasLoaded = function (map, mapsApi) {\n      _this.setState({\n        mapsLoaded: true,\n        map: map,\n        mapsApi: mapsApi,\n        singaporeLatLng: new mapsApi.LatLng(SG_COOR.lat, SG_COOR.lng),\n        autoCompleteService: new mapsApi.places.AutocompleteService(),\n        placesService: new mapsApi.places.PlacesService(map),\n        geoCoderService: new mapsApi.Geocoder(),\n        directionService: new mapsApi.DirectionsService()\n      });\n    };\n\n    _this.handleSearch = function () {\n      var _this$state = _this.state,\n          markers = _this$state.markers,\n          constraints = _this$state.constraints,\n          placesService = _this$state.placesService,\n          directionService = _this$state.directionService,\n          mapsApi = _this$state.mapsApi;\n\n      if (markers.length === 0) {\n        message.warn('Add a constraint and try again!');\n        return;\n      }\n\n      var filteredResults = [];\n      var marker = markers[0];\n      var timeLimit = constraints[0].time;\n      var markerLatLng = new mapsApi.LatLng(marker.lat, marker.lng);\n      var placesRequest = {\n        location: markerLatLng,\n        // radius: '30000', // Cannot be used with rankBy. Pick your poison!\n        type: ['restaurant', 'cafe'],\n        // List of types: https://developers.google.com/places/supported_types\n        query: 'ice cream',\n        rankBy: mapsApi.places.RankBy.DISTANCE // Cannot be used with radius.\n\n      }; // First, search for ice cream shops.\n\n      placesService.textSearch(placesRequest, function (response) {\n        // Only look at the nearest top 5.\n        var responseLimit = Math.min(5, response.length);\n\n        var _loop = function _loop(i) {\n          var iceCreamPlace = response[i];\n          var rating = iceCreamPlace.rating,\n              name = iceCreamPlace.name;\n          var address = iceCreamPlace.formatted_address; // e.g 80 mandai Lake Rd,\n\n          var priceLevel = iceCreamPlace.price_level; // 1, 2, 3...\n\n          var photoUrl = '';\n          var openNow = false;\n\n          if (iceCreamPlace.opening_hours) {\n            openNow = iceCreamPlace.opening_hours.open_now; // e.g true/false\n          }\n\n          if (iceCreamPlace.photos && iceCreamPlace.photos.length > 0) {\n            photoUrl = iceCreamPlace.photos[0].getUrl();\n          } // Second, For each iceCreamPlace, check if it is within acceptable travelling distance\n\n\n          var directionRequest = {\n            origin: markerLatLng,\n            destination: address,\n            // Address of ice cream place\n            travelMode: 'DRIVING'\n          };\n          directionService.route(directionRequest, function (result, status) {\n            if (status !== 'OK') {\n              return;\n            }\n\n            var travellingRoute = result.routes[0].legs[0]; // { duration: { text: 1mins, value: 600 } }\n\n            var travellingTimeInMinutes = travellingRoute.duration.value / 60;\n\n            if (travellingTimeInMinutes < timeLimit) {\n              var distanceText = travellingRoute.distance.text; // 6.4km\n\n              var timeText = travellingRoute.duration.text; // 11 mins\n\n              filteredResults.push({\n                name: name,\n                rating: rating,\n                address: address,\n                openNow: openNow,\n                priceLevel: priceLevel,\n                photoUrl: photoUrl,\n                distanceText: distanceText,\n                timeText: timeText\n              });\n            } // Finally, Add results to state\n\n\n            _this.setState({\n              searchResults: filteredResults\n            });\n          });\n        };\n\n        for (var i = 0; i < responseLimit; i++) {\n          _loop(i);\n        }\n      });\n    };\n\n    _this.state = {\n      constraints: [{\n        name: '',\n        time: 0\n      }],\n      searchResults: [],\n      mapsLoaded: false,\n      markers: [],\n      map: {},\n      mapsApi: {},\n      singaporeLatLng: {},\n      autoCompleteService: {},\n      placesService: {},\n      geoCoderService: {},\n      directionService: {}\n    };\n    return _this;\n  } // Update name for constraint with index === key\n\n\n  _createClass(MapsContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          constraints = _this$state2.constraints,\n          mapsLoaded = _this$state2.mapsLoaded,\n          singaporeLatLng = _this$state2.singaporeLatLng,\n          markers = _this$state2.markers,\n          searchResults = _this$state2.searchResults;\n      var _this$state3 = this.state,\n          autoCompleteService = _this$state3.autoCompleteService,\n          geoCoderService = _this$state3.geoCoderService; // Google Maps Services\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        className: \"h-lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(GoogleMapReact, {\n        bootstrapURLKeys: {\n          key: 'AIzaSyBrR5fLDg5k8V4lK9XpxIUnRrhzBrcuoPQ',\n          libraries: ['places', 'directions']\n        },\n        defaultZoom: 11,\n        defaultCenter: {\n          lat: 32.0603,\n          lng: 118.7679\n        },\n        yesIWantToUseGoogleMapApiInternals: true,\n        onGoogleApiLoaded: function onGoogleApiLoaded(_ref) {\n          var map = _ref.map,\n              maps = _ref.maps;\n          return _this2.apiHasLoaded(map, maps);\n        } // \"maps\" is the mapApi. Bad naming but that's their library.\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, markers.map(function (marker, key) {\n        var name = marker.name,\n            lat = marker.lat,\n            lng = marker.lng;\n        return React.createElement(MapMarker, {\n          key: key,\n          name: name,\n          lat: lat,\n          lng: lng,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210\n          },\n          __self: this\n        });\n      }))), searchResults.length > 0 ? React.createElement(React.Fragment, null, React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }), React.createElement(\"section\", {\n        className: \"col-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"d-flex flex-column justify-content-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"mb-4 fw-md\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, \"Tadah! Ice-Creams!\"), React.createElement(\"div\", {\n        className: \"d-flex flex-wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, searchResults.map(function (result, key) {\n        return React.createElement(PlaceCard, {\n          info: result,\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225\n          },\n          __self: this\n        });\n      }))))) : null);\n    }\n  }]);\n\n  return MapsContainer;\n}(Component);\n\nexport default MapsContainer;","map":{"version":3,"sources":["/Users/SHAWN/Downloads/StudyMate2/src/containers/MapContainer.js"],"names":["React","Component","GoogleMapReact","MapAutoComplete","MapMarker","PlaceCard","ConstraintSlider","Button","Input","Divider","message","SG_COOR","lat","lng","MapsContainer","props","updateConstraintName","event","key","preventDefault","prevConstraints","state","constraints","Object","assign","name","target","value","setState","updateConstraintTime","time","addMarker","prevMarkers","markers","newMarker","i","length","success","push","apiHasLoaded","map","mapsApi","mapsLoaded","singaporeLatLng","LatLng","autoCompleteService","places","AutocompleteService","placesService","PlacesService","geoCoderService","Geocoder","directionService","DirectionsService","handleSearch","warn","filteredResults","marker","timeLimit","markerLatLng","placesRequest","location","type","query","rankBy","RankBy","DISTANCE","textSearch","response","responseLimit","Math","min","iceCreamPlace","rating","address","formatted_address","priceLevel","price_level","photoUrl","openNow","opening_hours","open_now","photos","getUrl","directionRequest","origin","destination","travelMode","route","result","status","travellingRoute","routes","legs","travellingTimeInMinutes","duration","distanceText","distance","text","timeText","searchResults","libraries","maps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport MapAutoComplete from '../components/MapAutoComplete';\nimport MapMarker from '../components/MapMarker';\nimport PlaceCard from '../components/PlaceCard';\nimport ConstraintSlider from '../components/ConstraintSlider';\n\nimport { Button, Input, Divider, message } from 'antd';\n\nconst SG_COOR = { lat: 1.3521, lng: 103.8198 };\n\nclass MapsContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      constraints: [{ name: '', time: 0 }],\n      searchResults: [],\n      mapsLoaded: false,\n      markers: [],\n      map: {},\n      mapsApi: {},\n      singaporeLatLng: {},\n      autoCompleteService: {},\n      placesService: {},\n      geoCoderService: {},\n      directionService: {},\n    };\n  }\n\n  // Update name for constraint with index === key\n  updateConstraintName = ((event, key) => {\n    event.preventDefault();\n    const prevConstraints = this.state.constraints;\n    const constraints = Object.assign([], prevConstraints);\n    constraints[key].name = event.target.value;\n    this.setState({ constraints });\n  });\n\n  // Updates distance (in KM) for constraint with index == key\n  updateConstraintTime = ((key, value) => {\n    const prevConstraints = this.state.constraints;\n    const constraints = Object.assign([], prevConstraints);\n    constraints[key].time = value;\n    this.setState({ constraints });\n  });\n\n  // Adds a Marker to the GoogleMaps component\n  addMarker = ((lat, lng, name) => {\n    const prevMarkers = this.state.markers;\n    const markers = Object.assign([], prevMarkers);\n\n    // If name already exists in marker list just replace lat & lng.\n    let newMarker = true;\n    for (let i = 0; i < markers.length; i++) {\n      if (markers[i].name === name) {\n        newMarker = false;\n        markers[i].lat = lat;\n        markers[i].lng = lng;\n        message.success(`Updated \"${name}\" Marker`);\n        break;\n      }\n    }\n    // Name does not exist in marker list. Create new marker\n    if (newMarker) {\n      markers.push({ lat, lng, name });\n      message.success(`Added new \"${name}\" Marker`);\n    }\n\n    this.setState({ markers });\n  });\n\n  // Runs once when the Google Maps library is ready\n  // Initializes all services that we need\n  apiHasLoaded = ((map, mapsApi) => {\n    this.setState({\n      mapsLoaded: true,\n      map,\n      mapsApi,\n      singaporeLatLng: new mapsApi.LatLng(SG_COOR.lat, SG_COOR.lng),\n      autoCompleteService: new mapsApi.places.AutocompleteService(),\n      placesService: new mapsApi.places.PlacesService(map),\n      geoCoderService: new mapsApi.Geocoder(),\n      directionService: new mapsApi.DirectionsService(),\n    });\n  });\n\n  // With the constraints, find some places serving ice-cream\n  handleSearch = (() => {\n    const { markers, constraints, placesService, directionService, mapsApi } = this.state;\n    if (markers.length === 0) {\n      message.warn('Add a constraint and try again!');\n      return;\n    }\n    const filteredResults = [];\n    const marker = markers[0];\n    const timeLimit = constraints[0].time;\n    const markerLatLng = new mapsApi.LatLng(marker.lat, marker.lng);\n\n    const placesRequest = {\n      location: markerLatLng,\n      // radius: '30000', // Cannot be used with rankBy. Pick your poison!\n      type: ['restaurant', 'cafe'], // List of types: https://developers.google.com/places/supported_types\n      query: 'ice cream',\n      rankBy: mapsApi.places.RankBy.DISTANCE, // Cannot be used with radius.\n    };\n\n    // First, search for ice cream shops.\n    placesService.textSearch(placesRequest, ((response) => {\n      // Only look at the nearest top 5.\n      const responseLimit = Math.min(5, response.length);\n      for (let i = 0; i < responseLimit; i++) {\n        const iceCreamPlace = response[i];\n        const { rating, name } = iceCreamPlace;\n        const address = iceCreamPlace.formatted_address; // e.g 80 mandai Lake Rd,\n        const priceLevel = iceCreamPlace.price_level; // 1, 2, 3...\n        let photoUrl = '';\n        let openNow = false;\n        if (iceCreamPlace.opening_hours) {\n          openNow = iceCreamPlace.opening_hours.open_now; // e.g true/false\n        }\n        if (iceCreamPlace.photos && iceCreamPlace.photos.length > 0) {\n          photoUrl = iceCreamPlace.photos[0].getUrl();\n        }\n\n        // Second, For each iceCreamPlace, check if it is within acceptable travelling distance\n        const directionRequest = {\n          origin: markerLatLng,\n          destination: address, // Address of ice cream place\n          travelMode: 'DRIVING',\n        }\n        directionService.route(directionRequest, ((result, status) => {\n          if (status !== 'OK') { return }\n          const travellingRoute = result.routes[0].legs[0]; // { duration: { text: 1mins, value: 600 } }\n          const travellingTimeInMinutes = travellingRoute.duration.value / 60;\n          if (travellingTimeInMinutes < timeLimit) {\n            const distanceText = travellingRoute.distance.text; // 6.4km\n            const timeText = travellingRoute.duration.text; // 11 mins\n            filteredResults.push({\n              name,\n              rating,\n              address,\n              openNow,\n              priceLevel,\n              photoUrl,\n              distanceText,\n              timeText,\n            });\n          }\n          // Finally, Add results to state\n          this.setState({ searchResults: filteredResults });\n        }));\n      }\n    }));\n  });\n\n  render() {\n    const { constraints, mapsLoaded, singaporeLatLng, markers, searchResults } = this.state;\n    const { autoCompleteService, geoCoderService } = this.state; // Google Maps Services\n    return (\n      <div>\n        {/* Constraints section */}\n        {/* <section className=\"col-4\">\n          {mapsLoaded ?\n            <div>\n              {constraints.map((constraint, key) => {\n                const { name, time } = constraint;\n                return (\n                  <div key={key} className=\"mb-4\">\n                    <div className=\"d-flex mb-2\">\n                      <Input className=\"col-4 mr-2\" placeholder=\"Name\" onChange={(event) => this.updateConstraintName(event, key)} />\n                      <MapAutoComplete\n                        autoCompleteService={autoCompleteService}\n                        geoCoderService={geoCoderService}\n                        singaporeLatLng={singaporeLatLng}\n                        markerName={name}\n                        addMarker={this.addMarker}\n                      />\n                    </div>\n                    <ConstraintSlider\n                      iconType=\"car\"\n                      value={time}\n                      onChange={(value) => this.updateConstraintTime(key, value)}\n                      text=\"Minutes away by car\"\n                    />\n                    <Divider />\n                  </div>\n                );\n              })}\n            </div>\n            : null\n          }\n        </section> */}\n\n        {/* Maps Section */}\n        <section className=\"h-lg\">\n          <GoogleMapReact\n            bootstrapURLKeys={{\n              key: 'AIzaSyBrR5fLDg5k8V4lK9XpxIUnRrhzBrcuoPQ',\n              libraries: ['places', 'directions']\n            }}\n            defaultZoom={11}\n            defaultCenter={{ lat: 32.0603, lng: 118.7679}}\n            yesIWantToUseGoogleMapApiInternals={true}\n            onGoogleApiLoaded={({ map, maps }) => this.apiHasLoaded(map, maps)} // \"maps\" is the mapApi. Bad naming but that's their library.\n          >\n            {/* Pin markers on the Map*/}\n            {markers.map((marker, key) => {\n              const { name, lat, lng } = marker;\n              return (\n                <MapMarker key={key} name={name} lat={lat} lng={lng} />\n              );\n            })}\n          </GoogleMapReact>\n        </section>\n\n        {/* Results section */}\n        {searchResults.length > 0 ?\n          <>\n            <Divider />\n            <section className=\"col-12\">\n              <div className=\"d-flex flex-column justify-content-center\">\n                <h1 className=\"mb-4 fw-md\">Tadah! Ice-Creams!</h1>\n                <div className=\"d-flex flex-wrap\">\n                  {searchResults.map((result, key) => (\n                    <PlaceCard info={result} key={key} />\n                  ))}\n                </div>\n              </div>\n            </section>\n          </>\n          : null}\n      </div>\n    )\n  }\n}\n\nexport default MapsContainer;"]},"metadata":{},"sourceType":"module"}