{"ast":null,"code":"var _jsxFileName = \"/Users/SHAWN/Downloads/StudyMate2/src/containers/MapContainer.js\";\nimport React, { Fragment } from \"react\";\nimport { withGoogleMap, GoogleMap, withScriptjs, Marker, Circle } from \"react-google-maps\";\n\nvar Map = function Map(props) {\n  //.log(props.markerLoc.get(0));\n  props.markerLoc.map(function (coordPair) {\n    console.log(1);\n  });\n\n  for (var m in props.markerLoc) {\n    if (typeof obj[m] == \"function\") {\n      console.log(m);\n    }\n  }\n\n  ;\n  return React.createElement(GoogleMap, {\n    defaultZoom: props.zoom,\n    defaultCenter: {\n      lat: 1,\n      lng: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(Marker, {\n    position: {\n      lat: parseFloat(1),\n      lng: parseFloat(1)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), props.markerLoc.map(function (coordPair) {\n    console.log(1);\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(Marker, {\n      position: {\n        lat: parseFloat(1),\n        lng: parseFloat(1)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }), React.createElement(Circle, {\n      defaultCenter: {\n        lat: parseFloat(1),\n        lng: parseFloat(1)\n      },\n      radius: 3000,\n      options: {\n        strokeColor: \"#ff0000\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }));\n  }));\n};\n\nexport default withScriptjs(withGoogleMap(Map));","map":{"version":3,"sources":["/Users/SHAWN/Downloads/StudyMate2/src/containers/MapContainer.js"],"names":["React","Fragment","withGoogleMap","GoogleMap","withScriptjs","Marker","Circle","Map","props","markerLoc","map","coordPair","console","log","m","obj","zoom","lat","lng","parseFloat","strokeColor"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SACEC,aADF,EAEEC,SAFF,EAGEC,YAHF,EAIEC,MAJF,EAKEC,MALF,QAMO,mBANP;;AAQA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAAAC,KAAK,EAAI;AACnB;AACAA,EAAAA,KAAK,CAACC,SAAN,CAAgBC,GAAhB,CAAoB,UAAAC,SAAS,EAAI;AAC/BC,IAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ;AAAgB,GADlB;;AAEE,OAAI,IAAIC,CAAR,IAAaN,KAAK,CAACC,SAAnB,EAA8B;AAC5B,QAAG,OAAOM,GAAG,CAACD,CAAD,CAAV,IAAiB,UAApB,EAAgC;AAC5BF,MAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ;AACH;AACF;;AAAA;AACH,SACE,oBAAC,SAAD;AACE,IAAA,WAAW,EAAEN,KAAK,CAACQ,IADrB;AAEE,IAAA,aAAa,EAAE;AAACC,MAAAA,GAAG,EAAC,CAAL;AAAQC,MAAAA,GAAG,EAAC;AAAZ,KAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIA,oBAAC,MAAD;AACU,IAAA,QAAQ,EAAE;AACRD,MAAAA,GAAG,EAAEE,UAAU,CAAC,CAAD,CADP;AAERD,MAAAA,GAAG,EAAEC,UAAU,CAAC,CAAD;AAFP,KADpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJA,EAUGX,KAAK,CAACC,SAAN,CAAgBC,GAAhB,CAAoB,UAAAC,SAAS,EAAI;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ;AACA,WACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AACE,MAAA,QAAQ,EAAE;AACRI,QAAAA,GAAG,EAAEE,UAAU,CAAC,CAAD,CADP;AAERD,QAAAA,GAAG,EAAEC,UAAU,CAAC,CAAD;AAFP,OADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAOE,oBAAC,MAAD;AACE,MAAA,aAAa,EAAE;AACbF,QAAAA,GAAG,EAAEE,UAAU,CAAC,CAAD,CADF;AAEbD,QAAAA,GAAG,EAAEC,UAAU,CAAC,CAAD;AAFF,OADjB;AAKE,MAAA,MAAM,EAAE,IALV;AAME,MAAA,OAAO,EAAE;AAACC,QAAAA,WAAW,EAAE;AAAd,OANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CADF;AAkBD,GApBA,CAVH,CADF;AAkCD,CA3CD;;AA6CA,eAAehB,YAAY,CAACF,aAAa,CAACK,GAAD,CAAd,CAA3B","sourcesContent":["import React, {Fragment} from \"react\";\nimport {\n  withGoogleMap,\n  GoogleMap,\n  withScriptjs,\n  Marker,\n  Circle\n} from \"react-google-maps\";\n\nconst Map = props => {\n  //.log(props.markerLoc.get(0));\n  props.markerLoc.map(coordPair => {\n    console.log(1);});\n    for(var m in props.markerLoc) {\n      if(typeof obj[m] == \"function\") {\n          console.log(m)\n      }\n    };\n  return (\n    <GoogleMap\n      defaultZoom={props.zoom}\n      defaultCenter={{lat:1, lng:1}}\n    >\n    <Marker\n              position={{\n                lat: parseFloat(1),\n                lng: parseFloat(1)\n              }}\n            />\n      {props.markerLoc.map(coordPair => {\n        console.log(1);\n        return (\n          <Fragment>\n            <Marker\n              position={{\n                lat: parseFloat(1),\n                lng: parseFloat(1)\n              }}\n            />\n            <Circle\n              defaultCenter={{\n                lat: parseFloat(1),\n                lng: parseFloat(1)\n              }}\n              radius={3000}\n              options={{strokeColor: \"#ff0000\"}}\n            />\n          </Fragment>\n        );\n      })}\n    </GoogleMap>\n  );\n}\n\nexport default withScriptjs(withGoogleMap(Map));"]},"metadata":{},"sourceType":"module"}