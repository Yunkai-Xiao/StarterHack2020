{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport warning from 'warning';\nimport toArray from 'rc-util/es/Children/toArray';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { treeContextTypes } from './contextTypes';\nimport { convertTreeToEntities, convertDataToTree, getDataAndAria, getPosition, getDragNodesKeys, parseCheckedKeys, conductExpandParent, calcSelectedKeys, calcDropPosition, arrAdd, arrDel, posToArr, mapChildren, conductCheck, warnOnlyTreeNode } from './util';\n\nvar Tree = function (_React$Component) {\n  _inherits(Tree, _React$Component);\n\n  function Tree(props) {\n    _classCallCheck(this, Tree);\n\n    var _this = _possibleConstructorReturn(this, (Tree.__proto__ || Object.getPrototypeOf(Tree)).call(this, props));\n\n    _this.onNodeDragStart = function (event, node) {\n      var expandedKeys = _this.state.expandedKeys;\n      var onDragStart = _this.props.onDragStart;\n      var _node$props = node.props,\n          eventKey = _node$props.eventKey,\n          children = _node$props.children;\n      _this.dragNode = node;\n\n      _this.setState({\n        dragNodesKeys: getDragNodesKeys(children, node),\n        expandedKeys: arrDel(expandedKeys, eventKey)\n      });\n\n      if (onDragStart) {\n        onDragStart({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onNodeDragEnter = function (event, node) {\n      var expandedKeys = _this.state.expandedKeys;\n      var onDragEnter = _this.props.onDragEnter;\n      var _node$props2 = node.props,\n          pos = _node$props2.pos,\n          eventKey = _node$props2.eventKey;\n      if (!_this.dragNode) return;\n      var dropPosition = calcDropPosition(event, node); // Skip if drag node is self\n\n      if (_this.dragNode.props.eventKey === eventKey && dropPosition === 0) {\n        _this.setState({\n          dragOverNodeKey: '',\n          dropPosition: null\n        });\n\n        return;\n      } // Ref: https://github.com/react-component/tree/issues/132\n      // Add timeout to let onDragLevel fire before onDragEnter,\n      // so that we can clean drag props for onDragLeave node.\n      // Macro task for this:\n      // https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-script\n\n\n      setTimeout(function () {\n        // Update drag over node\n        _this.setState({\n          dragOverNodeKey: eventKey,\n          dropPosition: dropPosition\n        }); // Side effect for delay drag\n\n\n        if (!_this.delayedDragEnterLogic) {\n          _this.delayedDragEnterLogic = {};\n        }\n\n        Object.keys(_this.delayedDragEnterLogic).forEach(function (key) {\n          clearTimeout(_this.delayedDragEnterLogic[key]);\n        });\n        _this.delayedDragEnterLogic[pos] = setTimeout(function () {\n          var newExpandedKeys = arrAdd(expandedKeys, eventKey);\n\n          if (!('expandedKeys' in _this.props)) {\n            _this.setState({\n              expandedKeys: newExpandedKeys\n            });\n          }\n\n          if (onDragEnter) {\n            onDragEnter({\n              event: event,\n              node: node,\n              expandedKeys: newExpandedKeys\n            });\n          }\n        }, 400);\n      }, 0);\n    };\n\n    _this.onNodeDragOver = function (event, node) {\n      var onDragOver = _this.props.onDragOver;\n      var eventKey = node.props.eventKey; // Update drag position\n\n      if (_this.dragNode && eventKey === _this.state.dragOverNodeKey) {\n        var dropPosition = calcDropPosition(event, node);\n        if (dropPosition === _this.state.dropPosition) return;\n\n        _this.setState({\n          dropPosition: dropPosition\n        });\n      }\n\n      if (onDragOver) {\n        onDragOver({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onNodeDragLeave = function (event, node) {\n      var onDragLeave = _this.props.onDragLeave;\n\n      _this.setState({\n        dragOverNodeKey: ''\n      });\n\n      if (onDragLeave) {\n        onDragLeave({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onNodeDragEnd = function (event, node) {\n      var onDragEnd = _this.props.onDragEnd;\n\n      _this.setState({\n        dragOverNodeKey: ''\n      });\n\n      if (onDragEnd) {\n        onDragEnd({\n          event: event,\n          node: node\n        });\n      }\n\n      _this.dragNode = null;\n    };\n\n    _this.onNodeDrop = function (event, node) {\n      var _this$state = _this.state,\n          _this$state$dragNodes = _this$state.dragNodesKeys,\n          dragNodesKeys = _this$state$dragNodes === undefined ? [] : _this$state$dragNodes,\n          dropPosition = _this$state.dropPosition;\n      var onDrop = _this.props.onDrop;\n      var _node$props3 = node.props,\n          eventKey = _node$props3.eventKey,\n          pos = _node$props3.pos;\n\n      _this.setState({\n        dragOverNodeKey: ''\n      });\n\n      if (dragNodesKeys.indexOf(eventKey) !== -1) {\n        warning(false, 'Can not drop to dragNode(include it\\'s children node)');\n        return;\n      }\n\n      var posArr = posToArr(pos);\n      var dropResult = {\n        event: event,\n        node: node,\n        dragNode: _this.dragNode,\n        dragNodesKeys: dragNodesKeys.slice(),\n        dropPosition: dropPosition + Number(posArr[posArr.length - 1])\n      };\n\n      if (dropPosition !== 0) {\n        dropResult.dropToGap = true;\n      }\n\n      if (onDrop) {\n        onDrop(dropResult);\n      }\n\n      _this.dragNode = null;\n    };\n\n    _this.onNodeClick = function (e, treeNode) {\n      var onClick = _this.props.onClick;\n\n      if (onClick) {\n        onClick(e, treeNode);\n      }\n    };\n\n    _this.onNodeDoubleClick = function (e, treeNode) {\n      var onDoubleClick = _this.props.onDoubleClick;\n\n      if (onDoubleClick) {\n        onDoubleClick(e, treeNode);\n      }\n    };\n\n    _this.onNodeSelect = function (e, treeNode) {\n      var selectedKeys = _this.state.selectedKeys;\n      var keyEntities = _this.state.keyEntities;\n      var _this$props = _this.props,\n          onSelect = _this$props.onSelect,\n          multiple = _this$props.multiple;\n      var _treeNode$props = treeNode.props,\n          selected = _treeNode$props.selected,\n          eventKey = _treeNode$props.eventKey;\n      var targetSelected = !selected; // Update selected keys\n\n      if (!targetSelected) {\n        selectedKeys = arrDel(selectedKeys, eventKey);\n      } else if (!multiple) {\n        selectedKeys = [eventKey];\n      } else {\n        selectedKeys = arrAdd(selectedKeys, eventKey);\n      } // [Legacy] Not found related usage in doc or upper libs\n\n\n      var selectedNodes = selectedKeys.map(function (key) {\n        var entity = keyEntities[key];\n        if (!entity) return null;\n        return entity.node;\n      }).filter(function (node) {\n        return node;\n      });\n\n      _this.setUncontrolledState({\n        selectedKeys: selectedKeys\n      });\n\n      if (onSelect) {\n        var eventObj = {\n          event: 'select',\n          selected: targetSelected,\n          node: treeNode,\n          selectedNodes: selectedNodes,\n          nativeEvent: e.nativeEvent\n        };\n        onSelect(selectedKeys, eventObj);\n      }\n    };\n\n    _this.onNodeCheck = function (e, treeNode, checked) {\n      var _this$state2 = _this.state,\n          keyEntities = _this$state2.keyEntities,\n          oriCheckedKeys = _this$state2.checkedKeys,\n          oriHalfCheckedKeys = _this$state2.halfCheckedKeys;\n      var _this$props2 = _this.props,\n          checkStrictly = _this$props2.checkStrictly,\n          onCheck = _this$props2.onCheck;\n      var eventKey = treeNode.props.eventKey; // Prepare trigger arguments\n\n      var checkedObj = void 0;\n      var eventObj = {\n        event: 'check',\n        node: treeNode,\n        checked: checked,\n        nativeEvent: e.nativeEvent\n      };\n\n      if (checkStrictly) {\n        var checkedKeys = checked ? arrAdd(oriCheckedKeys, eventKey) : arrDel(oriCheckedKeys, eventKey);\n        var halfCheckedKeys = arrDel(oriHalfCheckedKeys, eventKey);\n        checkedObj = {\n          checked: checkedKeys,\n          halfChecked: halfCheckedKeys\n        };\n        eventObj.checkedNodes = checkedKeys.map(function (key) {\n          return keyEntities[key];\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (entity) {\n          return entity.node;\n        });\n\n        _this.setUncontrolledState({\n          checkedKeys: checkedKeys\n        });\n      } else {\n        var _conductCheck = conductCheck([eventKey], checked, keyEntities, {\n          checkedKeys: oriCheckedKeys,\n          halfCheckedKeys: oriHalfCheckedKeys\n        }),\n            _checkedKeys = _conductCheck.checkedKeys,\n            _halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n        checkedObj = _checkedKeys; // [Legacy] This is used for `rc-tree-select`\n\n        eventObj.checkedNodes = [];\n        eventObj.checkedNodesPositions = [];\n        eventObj.halfCheckedKeys = _halfCheckedKeys;\n\n        _checkedKeys.forEach(function (key) {\n          var entity = keyEntities[key];\n          if (!entity) return;\n          var node = entity.node,\n              pos = entity.pos;\n          eventObj.checkedNodes.push(node);\n          eventObj.checkedNodesPositions.push({\n            node: node,\n            pos: pos\n          });\n        });\n\n        _this.setUncontrolledState({\n          checkedKeys: _checkedKeys,\n          halfCheckedKeys: _halfCheckedKeys\n        });\n      }\n\n      if (onCheck) {\n        onCheck(checkedObj, eventObj);\n      }\n    };\n\n    _this.onNodeLoad = function (treeNode) {\n      return new Promise(function (resolve) {\n        // We need to get the latest state of loading/loaded keys\n        _this.setState(function (_ref) {\n          var _ref$loadedKeys = _ref.loadedKeys,\n              loadedKeys = _ref$loadedKeys === undefined ? [] : _ref$loadedKeys,\n              _ref$loadingKeys = _ref.loadingKeys,\n              loadingKeys = _ref$loadingKeys === undefined ? [] : _ref$loadingKeys;\n          var _this$props3 = _this.props,\n              loadData = _this$props3.loadData,\n              onLoad = _this$props3.onLoad;\n          var eventKey = treeNode.props.eventKey;\n\n          if (!loadData || loadedKeys.indexOf(eventKey) !== -1 || loadingKeys.indexOf(eventKey) !== -1) {\n            // react 15 will warn if return null\n            return {};\n          } // Process load data\n\n\n          var promise = loadData(treeNode);\n          promise.then(function () {\n            var newLoadedKeys = arrAdd(_this.state.loadedKeys, eventKey);\n            var newLoadingKeys = arrDel(_this.state.loadingKeys, eventKey); // onLoad should trigger before internal setState to avoid `loadData` trigger twice.\n            // https://github.com/ant-design/ant-design/issues/12464\n\n            if (onLoad) {\n              var eventObj = {\n                event: 'load',\n                node: treeNode\n              };\n              onLoad(newLoadedKeys, eventObj);\n            }\n\n            _this.setUncontrolledState({\n              loadedKeys: newLoadedKeys\n            });\n\n            _this.setState({\n              loadingKeys: newLoadingKeys\n            });\n\n            resolve();\n          });\n          return {\n            loadingKeys: arrAdd(loadingKeys, eventKey)\n          };\n        });\n      });\n    };\n\n    _this.onNodeExpand = function (e, treeNode) {\n      var expandedKeys = _this.state.expandedKeys;\n      var _this$props4 = _this.props,\n          onExpand = _this$props4.onExpand,\n          loadData = _this$props4.loadData;\n      var _treeNode$props2 = treeNode.props,\n          eventKey = _treeNode$props2.eventKey,\n          expanded = _treeNode$props2.expanded; // Update selected keys\n\n      var index = expandedKeys.indexOf(eventKey);\n      var targetExpanded = !expanded;\n      warning(expanded && index !== -1 || !expanded && index === -1, 'Expand state not sync with index check');\n\n      if (targetExpanded) {\n        expandedKeys = arrAdd(expandedKeys, eventKey);\n      } else {\n        expandedKeys = arrDel(expandedKeys, eventKey);\n      }\n\n      _this.setUncontrolledState({\n        expandedKeys: expandedKeys\n      });\n\n      if (onExpand) {\n        onExpand(expandedKeys, {\n          node: treeNode,\n          expanded: targetExpanded,\n          nativeEvent: e.nativeEvent\n        });\n      } // Async Load data\n\n\n      if (targetExpanded && loadData) {\n        var loadPromise = _this.onNodeLoad(treeNode);\n\n        return loadPromise ? loadPromise.then(function () {\n          // [Legacy] Refresh logic\n          _this.setUncontrolledState({\n            expandedKeys: expandedKeys\n          });\n        }) : null;\n      }\n\n      return null;\n    };\n\n    _this.onNodeMouseEnter = function (event, node) {\n      var onMouseEnter = _this.props.onMouseEnter;\n\n      if (onMouseEnter) {\n        onMouseEnter({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onNodeMouseLeave = function (event, node) {\n      var onMouseLeave = _this.props.onMouseLeave;\n\n      if (onMouseLeave) {\n        onMouseLeave({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.onNodeContextMenu = function (event, node) {\n      var onRightClick = _this.props.onRightClick;\n\n      if (onRightClick) {\n        event.preventDefault();\n        onRightClick({\n          event: event,\n          node: node\n        });\n      }\n    };\n\n    _this.setUncontrolledState = function (state) {\n      var needSync = false;\n      var newState = {};\n      Object.keys(state).forEach(function (name) {\n        if (name in _this.props) return;\n        needSync = true;\n        newState[name] = state[name];\n      });\n\n      if (needSync) {\n        _this.setState(newState);\n      }\n    };\n\n    _this.registerTreeNode = function (key, node) {\n      if (node) {\n        _this.domTreeNodes[key] = node;\n      } else {\n        delete _this.domTreeNodes[key];\n      }\n    };\n\n    _this.isKeyChecked = function (key) {\n      var _this$state$checkedKe = _this.state.checkedKeys,\n          checkedKeys = _this$state$checkedKe === undefined ? [] : _this$state$checkedKe;\n      return checkedKeys.indexOf(key) !== -1;\n    };\n\n    _this.renderTreeNode = function (child, index) {\n      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var _this$state3 = _this.state,\n          keyEntities = _this$state3.keyEntities,\n          _this$state3$expanded = _this$state3.expandedKeys,\n          expandedKeys = _this$state3$expanded === undefined ? [] : _this$state3$expanded,\n          _this$state3$selected = _this$state3.selectedKeys,\n          selectedKeys = _this$state3$selected === undefined ? [] : _this$state3$selected,\n          _this$state3$halfChec = _this$state3.halfCheckedKeys,\n          halfCheckedKeys = _this$state3$halfChec === undefined ? [] : _this$state3$halfChec,\n          _this$state3$loadedKe = _this$state3.loadedKeys,\n          loadedKeys = _this$state3$loadedKe === undefined ? [] : _this$state3$loadedKe,\n          _this$state3$loadingK = _this$state3.loadingKeys,\n          loadingKeys = _this$state3$loadingK === undefined ? [] : _this$state3$loadingK,\n          dragOverNodeKey = _this$state3.dragOverNodeKey,\n          dropPosition = _this$state3.dropPosition;\n      var pos = getPosition(level, index);\n      var key = child.key || pos;\n\n      if (!keyEntities[key]) {\n        warnOnlyTreeNode();\n        return null;\n      }\n\n      return React.cloneElement(child, {\n        key: key,\n        eventKey: key,\n        expanded: expandedKeys.indexOf(key) !== -1,\n        selected: selectedKeys.indexOf(key) !== -1,\n        loaded: loadedKeys.indexOf(key) !== -1,\n        loading: loadingKeys.indexOf(key) !== -1,\n        checked: _this.isKeyChecked(key),\n        halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n        pos: pos,\n        // [Legacy] Drag props\n        dragOver: dragOverNodeKey === key && dropPosition === 0,\n        dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n        dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n      });\n    };\n\n    _this.state = {\n      // TODO: Remove this eslint\n      posEntities: {},\n      // eslint-disable-line react/no-unused-state\n      keyEntities: {},\n      selectedKeys: [],\n      checkedKeys: [],\n      halfCheckedKeys: [],\n      loadedKeys: [],\n      loadingKeys: [],\n      treeNode: []\n    }; // Internal usage for `rc-tree-select`, we don't promise it will not change.\n\n    _this.domTreeNodes = {};\n    return _this;\n  }\n\n  _createClass(Tree, [{\n    key: 'getChildContext',\n    value: function getChildContext() {\n      var _props = this.props,\n          prefixCls = _props.prefixCls,\n          selectable = _props.selectable,\n          showIcon = _props.showIcon,\n          icon = _props.icon,\n          draggable = _props.draggable,\n          checkable = _props.checkable,\n          checkStrictly = _props.checkStrictly,\n          disabled = _props.disabled,\n          loadData = _props.loadData,\n          filterTreeNode = _props.filterTreeNode,\n          openTransitionName = _props.openTransitionName,\n          openAnimation = _props.openAnimation,\n          switcherIcon = _props.switcherIcon;\n      return {\n        rcTree: {\n          // root: this,\n          prefixCls: prefixCls,\n          selectable: selectable,\n          showIcon: showIcon,\n          icon: icon,\n          switcherIcon: switcherIcon,\n          draggable: draggable,\n          checkable: checkable,\n          checkStrictly: checkStrictly,\n          disabled: disabled,\n          openTransitionName: openTransitionName,\n          openAnimation: openAnimation,\n          loadData: loadData,\n          filterTreeNode: filterTreeNode,\n          renderTreeNode: this.renderTreeNode,\n          isKeyChecked: this.isKeyChecked,\n          onNodeClick: this.onNodeClick,\n          onNodeDoubleClick: this.onNodeDoubleClick,\n          onNodeExpand: this.onNodeExpand,\n          onNodeSelect: this.onNodeSelect,\n          onNodeCheck: this.onNodeCheck,\n          onNodeLoad: this.onNodeLoad,\n          onNodeMouseEnter: this.onNodeMouseEnter,\n          onNodeMouseLeave: this.onNodeMouseLeave,\n          onNodeContextMenu: this.onNodeContextMenu,\n          onNodeDragStart: this.onNodeDragStart,\n          onNodeDragEnter: this.onNodeDragEnter,\n          onNodeDragOver: this.onNodeDragOver,\n          onNodeDragLeave: this.onNodeDragLeave,\n          onNodeDragEnd: this.onNodeDragEnd,\n          onNodeDrop: this.onNodeDrop,\n          registerTreeNode: this.registerTreeNode\n        }\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var treeNode = this.state.treeNode;\n      var _props2 = this.props,\n          prefixCls = _props2.prefixCls,\n          className = _props2.className,\n          focusable = _props2.focusable,\n          showLine = _props2.showLine,\n          _props2$tabIndex = _props2.tabIndex,\n          tabIndex = _props2$tabIndex === undefined ? 0 : _props2$tabIndex;\n      var domProps = getDataAndAria(this.props);\n\n      if (focusable) {\n        domProps.tabIndex = tabIndex;\n        domProps.onKeyDown = this.onKeyDown;\n      }\n\n      return React.createElement('ul', _extends({}, domProps, {\n        className: classNames(prefixCls, className, _defineProperty({}, prefixCls + '-show-line', showLine)),\n        role: 'tree',\n        unselectable: 'on'\n      }), mapChildren(treeNode, function (node, index) {\n        return _this2.renderTreeNode(node, index);\n      }));\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(props, prevState) {\n      var prevProps = prevState.prevProps;\n      var newState = {\n        prevProps: props\n      };\n\n      function needSync(name) {\n        return !prevProps && name in props || prevProps && prevProps[name] !== props[name];\n      } // ================== Tree Node ==================\n\n\n      var treeNode = null; // Check if `treeData` or `children` changed and save into the state.\n\n      if (needSync('treeData')) {\n        treeNode = convertDataToTree(props.treeData);\n      } else if (needSync('children')) {\n        treeNode = toArray(props.children);\n      } // Tree support filter function which will break the tree structure in the vdm.\n      // We cache the treeNodes in state so that we can return the treeNode in event trigger.\n\n\n      if (treeNode) {\n        newState.treeNode = treeNode; // Calculate the entities data for quick match\n\n        var entitiesMap = convertTreeToEntities(treeNode);\n        newState.posEntities = entitiesMap.posEntities;\n        newState.keyEntities = entitiesMap.keyEntities;\n      }\n\n      var keyEntities = newState.keyEntities || prevState.keyEntities; // ================ expandedKeys =================\n\n      if (needSync('expandedKeys') || prevProps && needSync('autoExpandParent')) {\n        newState.expandedKeys = props.autoExpandParent || !prevProps && props.defaultExpandParent ? conductExpandParent(props.expandedKeys, keyEntities) : props.expandedKeys;\n      } else if (!prevProps && props.defaultExpandAll) {\n        newState.expandedKeys = Object.keys(keyEntities);\n      } else if (!prevProps && props.defaultExpandedKeys) {\n        newState.expandedKeys = props.autoExpandParent || props.defaultExpandParent ? conductExpandParent(props.defaultExpandedKeys, keyEntities) : props.defaultExpandedKeys;\n      } // ================ selectedKeys =================\n\n\n      if (props.selectable) {\n        if (needSync('selectedKeys')) {\n          newState.selectedKeys = calcSelectedKeys(props.selectedKeys, props);\n        } else if (!prevProps && props.defaultSelectedKeys) {\n          newState.selectedKeys = calcSelectedKeys(props.defaultSelectedKeys, props);\n        }\n      } // ================= checkedKeys =================\n\n\n      if (props.checkable) {\n        var checkedKeyEntity = void 0;\n\n        if (needSync('checkedKeys')) {\n          checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {};\n        } else if (!prevProps && props.defaultCheckedKeys) {\n          checkedKeyEntity = parseCheckedKeys(props.defaultCheckedKeys) || {};\n        } else if (treeNode) {\n          // If treeNode changed, we also need check it\n          checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {\n            checkedKeys: prevState.checkedKeys,\n            halfCheckedKeys: prevState.halfCheckedKeys\n          };\n        }\n\n        if (checkedKeyEntity) {\n          var _checkedKeyEntity = checkedKeyEntity,\n              _checkedKeyEntity$che = _checkedKeyEntity.checkedKeys,\n              checkedKeys = _checkedKeyEntity$che === undefined ? [] : _checkedKeyEntity$che,\n              _checkedKeyEntity$hal = _checkedKeyEntity.halfCheckedKeys,\n              halfCheckedKeys = _checkedKeyEntity$hal === undefined ? [] : _checkedKeyEntity$hal;\n\n          if (!props.checkStrictly) {\n            var conductKeys = conductCheck(checkedKeys, true, keyEntities);\n            checkedKeys = conductKeys.checkedKeys;\n            halfCheckedKeys = conductKeys.halfCheckedKeys;\n          }\n\n          newState.checkedKeys = checkedKeys;\n          newState.halfCheckedKeys = halfCheckedKeys;\n        }\n      } // ================= loadedKeys ==================\n\n\n      if (needSync('loadedKeys')) {\n        newState.loadedKeys = props.loadedKeys;\n      }\n\n      return newState;\n    }\n    /**\n     * [Legacy] Select handler is less small than node,\n     * so that this will trigger when drag enter node or select handler.\n     * This is a little tricky if customize css without padding.\n     * Better for use mouse move event to refresh drag state.\n     * But let's just keep it to avoid event trigger logic change.\n     */\n\n    /**\n     * Only update the value which is not in props\n     */\n\n    /**\n     * [Legacy] Original logic use `key` as tracking clue.\n     * We have to use `cloneElement` to pass `key`.\n     */\n\n  }]);\n\n  return Tree;\n}(React.Component);\n\nTree.propTypes = {\n  prefixCls: PropTypes.string,\n  className: PropTypes.string,\n  tabIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  children: PropTypes.any,\n  treeData: PropTypes.array,\n  // Generate treeNode by children\n  showLine: PropTypes.bool,\n  showIcon: PropTypes.bool,\n  icon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  focusable: PropTypes.bool,\n  selectable: PropTypes.bool,\n  disabled: PropTypes.bool,\n  multiple: PropTypes.bool,\n  checkable: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n  checkStrictly: PropTypes.bool,\n  draggable: PropTypes.bool,\n  defaultExpandParent: PropTypes.bool,\n  autoExpandParent: PropTypes.bool,\n  defaultExpandAll: PropTypes.bool,\n  defaultExpandedKeys: PropTypes.arrayOf(PropTypes.string),\n  expandedKeys: PropTypes.arrayOf(PropTypes.string),\n  defaultCheckedKeys: PropTypes.arrayOf(PropTypes.string),\n  checkedKeys: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])), PropTypes.object]),\n  defaultSelectedKeys: PropTypes.arrayOf(PropTypes.string),\n  selectedKeys: PropTypes.arrayOf(PropTypes.string),\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onExpand: PropTypes.func,\n  onCheck: PropTypes.func,\n  onSelect: PropTypes.func,\n  onLoad: PropTypes.func,\n  loadData: PropTypes.func,\n  loadedKeys: PropTypes.arrayOf(PropTypes.string),\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onRightClick: PropTypes.func,\n  onDragStart: PropTypes.func,\n  onDragEnter: PropTypes.func,\n  onDragOver: PropTypes.func,\n  onDragLeave: PropTypes.func,\n  onDragEnd: PropTypes.func,\n  onDrop: PropTypes.func,\n  filterTreeNode: PropTypes.func,\n  openTransitionName: PropTypes.string,\n  openAnimation: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  switcherIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func])\n};\nTree.childContextTypes = treeContextTypes;\nTree.defaultProps = {\n  prefixCls: 'rc-tree',\n  showLine: false,\n  showIcon: true,\n  selectable: true,\n  multiple: false,\n  checkable: false,\n  disabled: false,\n  checkStrictly: false,\n  draggable: false,\n  defaultExpandParent: true,\n  autoExpandParent: false,\n  defaultExpandAll: false,\n  defaultExpandedKeys: [],\n  defaultCheckedKeys: [],\n  defaultSelectedKeys: []\n};\npolyfill(Tree);\nexport default Tree;","map":{"version":3,"sources":["/Users/SHAWN/Downloads/StudyMate2/node_modules/rc-tree/es/Tree.js"],"names":["_extends","_defineProperty","_classCallCheck","_createClass","_possibleConstructorReturn","_inherits","React","PropTypes","classNames","warning","toArray","polyfill","treeContextTypes","convertTreeToEntities","convertDataToTree","getDataAndAria","getPosition","getDragNodesKeys","parseCheckedKeys","conductExpandParent","calcSelectedKeys","calcDropPosition","arrAdd","arrDel","posToArr","mapChildren","conductCheck","warnOnlyTreeNode","Tree","_React$Component","props","_this","__proto__","Object","getPrototypeOf","call","onNodeDragStart","event","node","expandedKeys","state","onDragStart","_node$props","eventKey","children","dragNode","setState","dragNodesKeys","onNodeDragEnter","onDragEnter","_node$props2","pos","dropPosition","dragOverNodeKey","setTimeout","delayedDragEnterLogic","keys","forEach","key","clearTimeout","newExpandedKeys","onNodeDragOver","onDragOver","onNodeDragLeave","onDragLeave","onNodeDragEnd","onDragEnd","onNodeDrop","_this$state","_this$state$dragNodes","undefined","onDrop","_node$props3","indexOf","posArr","dropResult","slice","Number","length","dropToGap","onNodeClick","e","treeNode","onClick","onNodeDoubleClick","onDoubleClick","onNodeSelect","selectedKeys","keyEntities","_this$props","onSelect","multiple","_treeNode$props","selected","targetSelected","selectedNodes","map","entity","filter","setUncontrolledState","eventObj","nativeEvent","onNodeCheck","checked","_this$state2","oriCheckedKeys","checkedKeys","oriHalfCheckedKeys","halfCheckedKeys","_this$props2","checkStrictly","onCheck","checkedObj","halfChecked","checkedNodes","_conductCheck","_checkedKeys","_halfCheckedKeys","checkedNodesPositions","push","onNodeLoad","Promise","resolve","_ref","_ref$loadedKeys","loadedKeys","_ref$loadingKeys","loadingKeys","_this$props3","loadData","onLoad","promise","then","newLoadedKeys","newLoadingKeys","onNodeExpand","_this$props4","onExpand","_treeNode$props2","expanded","index","targetExpanded","loadPromise","onNodeMouseEnter","onMouseEnter","onNodeMouseLeave","onMouseLeave","onNodeContextMenu","onRightClick","preventDefault","needSync","newState","name","registerTreeNode","domTreeNodes","isKeyChecked","_this$state$checkedKe","renderTreeNode","child","level","arguments","_this$state3","_this$state3$expanded","_this$state3$selected","_this$state3$halfChec","_this$state3$loadedKe","_this$state3$loadingK","cloneElement","loaded","loading","dragOver","dragOverGapTop","dragOverGapBottom","posEntities","value","getChildContext","_props","prefixCls","selectable","showIcon","icon","draggable","checkable","disabled","filterTreeNode","openTransitionName","openAnimation","switcherIcon","rcTree","render","_this2","_props2","className","focusable","showLine","_props2$tabIndex","tabIndex","domProps","onKeyDown","createElement","role","unselectable","getDerivedStateFromProps","prevState","prevProps","treeData","entitiesMap","autoExpandParent","defaultExpandParent","defaultExpandAll","defaultExpandedKeys","defaultSelectedKeys","checkedKeyEntity","defaultCheckedKeys","_checkedKeyEntity","_checkedKeyEntity$che","_checkedKeyEntity$hal","conductKeys","Component","propTypes","string","oneOfType","number","any","array","bool","func","arrayOf","object","childContextTypes","defaultProps"],"mappings":"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","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport warning from 'warning';\nimport toArray from 'rc-util/es/Children/toArray';\nimport { polyfill } from 'react-lifecycles-compat';\n\nimport { treeContextTypes } from './contextTypes';\nimport { convertTreeToEntities, convertDataToTree, getDataAndAria, getPosition, getDragNodesKeys, parseCheckedKeys, conductExpandParent, calcSelectedKeys, calcDropPosition, arrAdd, arrDel, posToArr, mapChildren, conductCheck, warnOnlyTreeNode } from './util';\n\nvar Tree = function (_React$Component) {\n  _inherits(Tree, _React$Component);\n\n  function Tree(props) {\n    _classCallCheck(this, Tree);\n\n    var _this = _possibleConstructorReturn(this, (Tree.__proto__ || Object.getPrototypeOf(Tree)).call(this, props));\n\n    _this.onNodeDragStart = function (event, node) {\n      var expandedKeys = _this.state.expandedKeys;\n      var onDragStart = _this.props.onDragStart;\n      var _node$props = node.props,\n          eventKey = _node$props.eventKey,\n          children = _node$props.children;\n\n\n      _this.dragNode = node;\n\n      _this.setState({\n        dragNodesKeys: getDragNodesKeys(children, node),\n        expandedKeys: arrDel(expandedKeys, eventKey)\n      });\n\n      if (onDragStart) {\n        onDragStart({ event: event, node: node });\n      }\n    };\n\n    _this.onNodeDragEnter = function (event, node) {\n      var expandedKeys = _this.state.expandedKeys;\n      var onDragEnter = _this.props.onDragEnter;\n      var _node$props2 = node.props,\n          pos = _node$props2.pos,\n          eventKey = _node$props2.eventKey;\n\n\n      if (!_this.dragNode) return;\n\n      var dropPosition = calcDropPosition(event, node);\n\n      // Skip if drag node is self\n      if (_this.dragNode.props.eventKey === eventKey && dropPosition === 0) {\n        _this.setState({\n          dragOverNodeKey: '',\n          dropPosition: null\n        });\n        return;\n      }\n\n      // Ref: https://github.com/react-component/tree/issues/132\n      // Add timeout to let onDragLevel fire before onDragEnter,\n      // so that we can clean drag props for onDragLeave node.\n      // Macro task for this:\n      // https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-script\n      setTimeout(function () {\n        // Update drag over node\n        _this.setState({\n          dragOverNodeKey: eventKey,\n          dropPosition: dropPosition\n        });\n\n        // Side effect for delay drag\n        if (!_this.delayedDragEnterLogic) {\n          _this.delayedDragEnterLogic = {};\n        }\n        Object.keys(_this.delayedDragEnterLogic).forEach(function (key) {\n          clearTimeout(_this.delayedDragEnterLogic[key]);\n        });\n        _this.delayedDragEnterLogic[pos] = setTimeout(function () {\n          var newExpandedKeys = arrAdd(expandedKeys, eventKey);\n          if (!('expandedKeys' in _this.props)) {\n            _this.setState({\n              expandedKeys: newExpandedKeys\n            });\n          }\n\n          if (onDragEnter) {\n            onDragEnter({ event: event, node: node, expandedKeys: newExpandedKeys });\n          }\n        }, 400);\n      }, 0);\n    };\n\n    _this.onNodeDragOver = function (event, node) {\n      var onDragOver = _this.props.onDragOver;\n      var eventKey = node.props.eventKey;\n\n      // Update drag position\n\n      if (_this.dragNode && eventKey === _this.state.dragOverNodeKey) {\n        var dropPosition = calcDropPosition(event, node);\n\n        if (dropPosition === _this.state.dropPosition) return;\n\n        _this.setState({\n          dropPosition: dropPosition\n        });\n      }\n\n      if (onDragOver) {\n        onDragOver({ event: event, node: node });\n      }\n    };\n\n    _this.onNodeDragLeave = function (event, node) {\n      var onDragLeave = _this.props.onDragLeave;\n\n\n      _this.setState({\n        dragOverNodeKey: ''\n      });\n\n      if (onDragLeave) {\n        onDragLeave({ event: event, node: node });\n      }\n    };\n\n    _this.onNodeDragEnd = function (event, node) {\n      var onDragEnd = _this.props.onDragEnd;\n\n      _this.setState({\n        dragOverNodeKey: ''\n      });\n      if (onDragEnd) {\n        onDragEnd({ event: event, node: node });\n      }\n\n      _this.dragNode = null;\n    };\n\n    _this.onNodeDrop = function (event, node) {\n      var _this$state = _this.state,\n          _this$state$dragNodes = _this$state.dragNodesKeys,\n          dragNodesKeys = _this$state$dragNodes === undefined ? [] : _this$state$dragNodes,\n          dropPosition = _this$state.dropPosition;\n      var onDrop = _this.props.onDrop;\n      var _node$props3 = node.props,\n          eventKey = _node$props3.eventKey,\n          pos = _node$props3.pos;\n\n\n      _this.setState({\n        dragOverNodeKey: ''\n      });\n\n      if (dragNodesKeys.indexOf(eventKey) !== -1) {\n        warning(false, 'Can not drop to dragNode(include it\\'s children node)');\n        return;\n      }\n\n      var posArr = posToArr(pos);\n\n      var dropResult = {\n        event: event,\n        node: node,\n        dragNode: _this.dragNode,\n        dragNodesKeys: dragNodesKeys.slice(),\n        dropPosition: dropPosition + Number(posArr[posArr.length - 1])\n      };\n\n      if (dropPosition !== 0) {\n        dropResult.dropToGap = true;\n      }\n\n      if (onDrop) {\n        onDrop(dropResult);\n      }\n\n      _this.dragNode = null;\n    };\n\n    _this.onNodeClick = function (e, treeNode) {\n      var onClick = _this.props.onClick;\n\n      if (onClick) {\n        onClick(e, treeNode);\n      }\n    };\n\n    _this.onNodeDoubleClick = function (e, treeNode) {\n      var onDoubleClick = _this.props.onDoubleClick;\n\n      if (onDoubleClick) {\n        onDoubleClick(e, treeNode);\n      }\n    };\n\n    _this.onNodeSelect = function (e, treeNode) {\n      var selectedKeys = _this.state.selectedKeys;\n      var keyEntities = _this.state.keyEntities;\n      var _this$props = _this.props,\n          onSelect = _this$props.onSelect,\n          multiple = _this$props.multiple;\n      var _treeNode$props = treeNode.props,\n          selected = _treeNode$props.selected,\n          eventKey = _treeNode$props.eventKey;\n\n      var targetSelected = !selected;\n\n      // Update selected keys\n      if (!targetSelected) {\n        selectedKeys = arrDel(selectedKeys, eventKey);\n      } else if (!multiple) {\n        selectedKeys = [eventKey];\n      } else {\n        selectedKeys = arrAdd(selectedKeys, eventKey);\n      }\n\n      // [Legacy] Not found related usage in doc or upper libs\n      var selectedNodes = selectedKeys.map(function (key) {\n        var entity = keyEntities[key];\n        if (!entity) return null;\n\n        return entity.node;\n      }).filter(function (node) {\n        return node;\n      });\n\n      _this.setUncontrolledState({ selectedKeys: selectedKeys });\n\n      if (onSelect) {\n        var eventObj = {\n          event: 'select',\n          selected: targetSelected,\n          node: treeNode,\n          selectedNodes: selectedNodes,\n          nativeEvent: e.nativeEvent\n        };\n        onSelect(selectedKeys, eventObj);\n      }\n    };\n\n    _this.onNodeCheck = function (e, treeNode, checked) {\n      var _this$state2 = _this.state,\n          keyEntities = _this$state2.keyEntities,\n          oriCheckedKeys = _this$state2.checkedKeys,\n          oriHalfCheckedKeys = _this$state2.halfCheckedKeys;\n      var _this$props2 = _this.props,\n          checkStrictly = _this$props2.checkStrictly,\n          onCheck = _this$props2.onCheck;\n      var eventKey = treeNode.props.eventKey;\n\n      // Prepare trigger arguments\n\n      var checkedObj = void 0;\n      var eventObj = {\n        event: 'check',\n        node: treeNode,\n        checked: checked,\n        nativeEvent: e.nativeEvent\n      };\n\n      if (checkStrictly) {\n        var checkedKeys = checked ? arrAdd(oriCheckedKeys, eventKey) : arrDel(oriCheckedKeys, eventKey);\n        var halfCheckedKeys = arrDel(oriHalfCheckedKeys, eventKey);\n        checkedObj = { checked: checkedKeys, halfChecked: halfCheckedKeys };\n\n        eventObj.checkedNodes = checkedKeys.map(function (key) {\n          return keyEntities[key];\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (entity) {\n          return entity.node;\n        });\n\n        _this.setUncontrolledState({ checkedKeys: checkedKeys });\n      } else {\n        var _conductCheck = conductCheck([eventKey], checked, keyEntities, {\n          checkedKeys: oriCheckedKeys, halfCheckedKeys: oriHalfCheckedKeys\n        }),\n            _checkedKeys = _conductCheck.checkedKeys,\n            _halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n        checkedObj = _checkedKeys;\n\n        // [Legacy] This is used for `rc-tree-select`\n        eventObj.checkedNodes = [];\n        eventObj.checkedNodesPositions = [];\n        eventObj.halfCheckedKeys = _halfCheckedKeys;\n\n        _checkedKeys.forEach(function (key) {\n          var entity = keyEntities[key];\n          if (!entity) return;\n\n          var node = entity.node,\n              pos = entity.pos;\n\n\n          eventObj.checkedNodes.push(node);\n          eventObj.checkedNodesPositions.push({ node: node, pos: pos });\n        });\n\n        _this.setUncontrolledState({\n          checkedKeys: _checkedKeys,\n          halfCheckedKeys: _halfCheckedKeys\n        });\n      }\n\n      if (onCheck) {\n        onCheck(checkedObj, eventObj);\n      }\n    };\n\n    _this.onNodeLoad = function (treeNode) {\n      return new Promise(function (resolve) {\n        // We need to get the latest state of loading/loaded keys\n        _this.setState(function (_ref) {\n          var _ref$loadedKeys = _ref.loadedKeys,\n              loadedKeys = _ref$loadedKeys === undefined ? [] : _ref$loadedKeys,\n              _ref$loadingKeys = _ref.loadingKeys,\n              loadingKeys = _ref$loadingKeys === undefined ? [] : _ref$loadingKeys;\n          var _this$props3 = _this.props,\n              loadData = _this$props3.loadData,\n              onLoad = _this$props3.onLoad;\n          var eventKey = treeNode.props.eventKey;\n\n\n          if (!loadData || loadedKeys.indexOf(eventKey) !== -1 || loadingKeys.indexOf(eventKey) !== -1) {\n            // react 15 will warn if return null\n            return {};\n          }\n\n          // Process load data\n          var promise = loadData(treeNode);\n          promise.then(function () {\n            var newLoadedKeys = arrAdd(_this.state.loadedKeys, eventKey);\n            var newLoadingKeys = arrDel(_this.state.loadingKeys, eventKey);\n\n            // onLoad should trigger before internal setState to avoid `loadData` trigger twice.\n            // https://github.com/ant-design/ant-design/issues/12464\n            if (onLoad) {\n              var eventObj = {\n                event: 'load',\n                node: treeNode\n              };\n              onLoad(newLoadedKeys, eventObj);\n            }\n\n            _this.setUncontrolledState({\n              loadedKeys: newLoadedKeys\n            });\n            _this.setState({\n              loadingKeys: newLoadingKeys\n            });\n\n            resolve();\n          });\n\n          return {\n            loadingKeys: arrAdd(loadingKeys, eventKey)\n          };\n        });\n      });\n    };\n\n    _this.onNodeExpand = function (e, treeNode) {\n      var expandedKeys = _this.state.expandedKeys;\n      var _this$props4 = _this.props,\n          onExpand = _this$props4.onExpand,\n          loadData = _this$props4.loadData;\n      var _treeNode$props2 = treeNode.props,\n          eventKey = _treeNode$props2.eventKey,\n          expanded = _treeNode$props2.expanded;\n\n      // Update selected keys\n\n      var index = expandedKeys.indexOf(eventKey);\n      var targetExpanded = !expanded;\n\n      warning(expanded && index !== -1 || !expanded && index === -1, 'Expand state not sync with index check');\n\n      if (targetExpanded) {\n        expandedKeys = arrAdd(expandedKeys, eventKey);\n      } else {\n        expandedKeys = arrDel(expandedKeys, eventKey);\n      }\n\n      _this.setUncontrolledState({ expandedKeys: expandedKeys });\n\n      if (onExpand) {\n        onExpand(expandedKeys, {\n          node: treeNode,\n          expanded: targetExpanded,\n          nativeEvent: e.nativeEvent\n        });\n      }\n\n      // Async Load data\n      if (targetExpanded && loadData) {\n        var loadPromise = _this.onNodeLoad(treeNode);\n        return loadPromise ? loadPromise.then(function () {\n          // [Legacy] Refresh logic\n          _this.setUncontrolledState({ expandedKeys: expandedKeys });\n        }) : null;\n      }\n\n      return null;\n    };\n\n    _this.onNodeMouseEnter = function (event, node) {\n      var onMouseEnter = _this.props.onMouseEnter;\n\n      if (onMouseEnter) {\n        onMouseEnter({ event: event, node: node });\n      }\n    };\n\n    _this.onNodeMouseLeave = function (event, node) {\n      var onMouseLeave = _this.props.onMouseLeave;\n\n      if (onMouseLeave) {\n        onMouseLeave({ event: event, node: node });\n      }\n    };\n\n    _this.onNodeContextMenu = function (event, node) {\n      var onRightClick = _this.props.onRightClick;\n\n      if (onRightClick) {\n        event.preventDefault();\n        onRightClick({ event: event, node: node });\n      }\n    };\n\n    _this.setUncontrolledState = function (state) {\n      var needSync = false;\n      var newState = {};\n\n      Object.keys(state).forEach(function (name) {\n        if (name in _this.props) return;\n\n        needSync = true;\n        newState[name] = state[name];\n      });\n\n      if (needSync) {\n        _this.setState(newState);\n      }\n    };\n\n    _this.registerTreeNode = function (key, node) {\n      if (node) {\n        _this.domTreeNodes[key] = node;\n      } else {\n        delete _this.domTreeNodes[key];\n      }\n    };\n\n    _this.isKeyChecked = function (key) {\n      var _this$state$checkedKe = _this.state.checkedKeys,\n          checkedKeys = _this$state$checkedKe === undefined ? [] : _this$state$checkedKe;\n\n      return checkedKeys.indexOf(key) !== -1;\n    };\n\n    _this.renderTreeNode = function (child, index) {\n      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var _this$state3 = _this.state,\n          keyEntities = _this$state3.keyEntities,\n          _this$state3$expanded = _this$state3.expandedKeys,\n          expandedKeys = _this$state3$expanded === undefined ? [] : _this$state3$expanded,\n          _this$state3$selected = _this$state3.selectedKeys,\n          selectedKeys = _this$state3$selected === undefined ? [] : _this$state3$selected,\n          _this$state3$halfChec = _this$state3.halfCheckedKeys,\n          halfCheckedKeys = _this$state3$halfChec === undefined ? [] : _this$state3$halfChec,\n          _this$state3$loadedKe = _this$state3.loadedKeys,\n          loadedKeys = _this$state3$loadedKe === undefined ? [] : _this$state3$loadedKe,\n          _this$state3$loadingK = _this$state3.loadingKeys,\n          loadingKeys = _this$state3$loadingK === undefined ? [] : _this$state3$loadingK,\n          dragOverNodeKey = _this$state3.dragOverNodeKey,\n          dropPosition = _this$state3.dropPosition;\n\n      var pos = getPosition(level, index);\n      var key = child.key || pos;\n\n      if (!keyEntities[key]) {\n        warnOnlyTreeNode();\n        return null;\n      }\n\n      return React.cloneElement(child, {\n        key: key,\n        eventKey: key,\n        expanded: expandedKeys.indexOf(key) !== -1,\n        selected: selectedKeys.indexOf(key) !== -1,\n        loaded: loadedKeys.indexOf(key) !== -1,\n        loading: loadingKeys.indexOf(key) !== -1,\n        checked: _this.isKeyChecked(key),\n        halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n        pos: pos,\n\n        // [Legacy] Drag props\n        dragOver: dragOverNodeKey === key && dropPosition === 0,\n        dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n        dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n      });\n    };\n\n    _this.state = {\n      // TODO: Remove this eslint\n      posEntities: {}, // eslint-disable-line react/no-unused-state\n      keyEntities: {},\n\n      selectedKeys: [],\n      checkedKeys: [],\n      halfCheckedKeys: [],\n      loadedKeys: [],\n      loadingKeys: [],\n\n      treeNode: []\n    };\n\n    // Internal usage for `rc-tree-select`, we don't promise it will not change.\n    _this.domTreeNodes = {};\n    return _this;\n  }\n\n  _createClass(Tree, [{\n    key: 'getChildContext',\n    value: function getChildContext() {\n      var _props = this.props,\n          prefixCls = _props.prefixCls,\n          selectable = _props.selectable,\n          showIcon = _props.showIcon,\n          icon = _props.icon,\n          draggable = _props.draggable,\n          checkable = _props.checkable,\n          checkStrictly = _props.checkStrictly,\n          disabled = _props.disabled,\n          loadData = _props.loadData,\n          filterTreeNode = _props.filterTreeNode,\n          openTransitionName = _props.openTransitionName,\n          openAnimation = _props.openAnimation,\n          switcherIcon = _props.switcherIcon;\n\n\n      return {\n        rcTree: {\n          // root: this,\n\n          prefixCls: prefixCls,\n          selectable: selectable,\n          showIcon: showIcon,\n          icon: icon,\n          switcherIcon: switcherIcon,\n          draggable: draggable,\n          checkable: checkable,\n          checkStrictly: checkStrictly,\n          disabled: disabled,\n          openTransitionName: openTransitionName,\n          openAnimation: openAnimation,\n\n          loadData: loadData,\n          filterTreeNode: filterTreeNode,\n          renderTreeNode: this.renderTreeNode,\n          isKeyChecked: this.isKeyChecked,\n\n          onNodeClick: this.onNodeClick,\n          onNodeDoubleClick: this.onNodeDoubleClick,\n          onNodeExpand: this.onNodeExpand,\n          onNodeSelect: this.onNodeSelect,\n          onNodeCheck: this.onNodeCheck,\n          onNodeLoad: this.onNodeLoad,\n          onNodeMouseEnter: this.onNodeMouseEnter,\n          onNodeMouseLeave: this.onNodeMouseLeave,\n          onNodeContextMenu: this.onNodeContextMenu,\n          onNodeDragStart: this.onNodeDragStart,\n          onNodeDragEnter: this.onNodeDragEnter,\n          onNodeDragOver: this.onNodeDragOver,\n          onNodeDragLeave: this.onNodeDragLeave,\n          onNodeDragEnd: this.onNodeDragEnd,\n          onNodeDrop: this.onNodeDrop,\n\n          registerTreeNode: this.registerTreeNode\n        }\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var treeNode = this.state.treeNode;\n      var _props2 = this.props,\n          prefixCls = _props2.prefixCls,\n          className = _props2.className,\n          focusable = _props2.focusable,\n          showLine = _props2.showLine,\n          _props2$tabIndex = _props2.tabIndex,\n          tabIndex = _props2$tabIndex === undefined ? 0 : _props2$tabIndex;\n\n      var domProps = getDataAndAria(this.props);\n\n      if (focusable) {\n        domProps.tabIndex = tabIndex;\n        domProps.onKeyDown = this.onKeyDown;\n      }\n\n      return React.createElement(\n        'ul',\n        _extends({}, domProps, {\n          className: classNames(prefixCls, className, _defineProperty({}, prefixCls + '-show-line', showLine)),\n          role: 'tree',\n          unselectable: 'on'\n        }),\n        mapChildren(treeNode, function (node, index) {\n          return _this2.renderTreeNode(node, index);\n        })\n      );\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(props, prevState) {\n      var prevProps = prevState.prevProps;\n\n      var newState = {\n        prevProps: props\n      };\n\n      function needSync(name) {\n        return !prevProps && name in props || prevProps && prevProps[name] !== props[name];\n      }\n\n      // ================== Tree Node ==================\n      var treeNode = null;\n\n      // Check if `treeData` or `children` changed and save into the state.\n      if (needSync('treeData')) {\n        treeNode = convertDataToTree(props.treeData);\n      } else if (needSync('children')) {\n        treeNode = toArray(props.children);\n      }\n\n      // Tree support filter function which will break the tree structure in the vdm.\n      // We cache the treeNodes in state so that we can return the treeNode in event trigger.\n      if (treeNode) {\n        newState.treeNode = treeNode;\n\n        // Calculate the entities data for quick match\n        var entitiesMap = convertTreeToEntities(treeNode);\n        newState.posEntities = entitiesMap.posEntities;\n        newState.keyEntities = entitiesMap.keyEntities;\n      }\n\n      var keyEntities = newState.keyEntities || prevState.keyEntities;\n\n      // ================ expandedKeys =================\n      if (needSync('expandedKeys') || prevProps && needSync('autoExpandParent')) {\n        newState.expandedKeys = props.autoExpandParent || !prevProps && props.defaultExpandParent ? conductExpandParent(props.expandedKeys, keyEntities) : props.expandedKeys;\n      } else if (!prevProps && props.defaultExpandAll) {\n        newState.expandedKeys = Object.keys(keyEntities);\n      } else if (!prevProps && props.defaultExpandedKeys) {\n        newState.expandedKeys = props.autoExpandParent || props.defaultExpandParent ? conductExpandParent(props.defaultExpandedKeys, keyEntities) : props.defaultExpandedKeys;\n      }\n\n      // ================ selectedKeys =================\n      if (props.selectable) {\n        if (needSync('selectedKeys')) {\n          newState.selectedKeys = calcSelectedKeys(props.selectedKeys, props);\n        } else if (!prevProps && props.defaultSelectedKeys) {\n          newState.selectedKeys = calcSelectedKeys(props.defaultSelectedKeys, props);\n        }\n      }\n\n      // ================= checkedKeys =================\n      if (props.checkable) {\n        var checkedKeyEntity = void 0;\n\n        if (needSync('checkedKeys')) {\n          checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {};\n        } else if (!prevProps && props.defaultCheckedKeys) {\n          checkedKeyEntity = parseCheckedKeys(props.defaultCheckedKeys) || {};\n        } else if (treeNode) {\n          // If treeNode changed, we also need check it\n          checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {\n            checkedKeys: prevState.checkedKeys,\n            halfCheckedKeys: prevState.halfCheckedKeys\n          };\n        }\n\n        if (checkedKeyEntity) {\n          var _checkedKeyEntity = checkedKeyEntity,\n              _checkedKeyEntity$che = _checkedKeyEntity.checkedKeys,\n              checkedKeys = _checkedKeyEntity$che === undefined ? [] : _checkedKeyEntity$che,\n              _checkedKeyEntity$hal = _checkedKeyEntity.halfCheckedKeys,\n              halfCheckedKeys = _checkedKeyEntity$hal === undefined ? [] : _checkedKeyEntity$hal;\n\n\n          if (!props.checkStrictly) {\n            var conductKeys = conductCheck(checkedKeys, true, keyEntities);\n            checkedKeys = conductKeys.checkedKeys;\n            halfCheckedKeys = conductKeys.halfCheckedKeys;\n          }\n\n          newState.checkedKeys = checkedKeys;\n          newState.halfCheckedKeys = halfCheckedKeys;\n        }\n      }\n      // ================= loadedKeys ==================\n      if (needSync('loadedKeys')) {\n        newState.loadedKeys = props.loadedKeys;\n      }\n\n      return newState;\n    }\n\n    /**\n     * [Legacy] Select handler is less small than node,\n     * so that this will trigger when drag enter node or select handler.\n     * This is a little tricky if customize css without padding.\n     * Better for use mouse move event to refresh drag state.\n     * But let's just keep it to avoid event trigger logic change.\n     */\n\n\n    /**\n     * Only update the value which is not in props\n     */\n\n\n    /**\n     * [Legacy] Original logic use `key` as tracking clue.\n     * We have to use `cloneElement` to pass `key`.\n     */\n\n  }]);\n\n  return Tree;\n}(React.Component);\n\nTree.propTypes = {\n  prefixCls: PropTypes.string,\n  className: PropTypes.string,\n  tabIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  children: PropTypes.any,\n  treeData: PropTypes.array, // Generate treeNode by children\n  showLine: PropTypes.bool,\n  showIcon: PropTypes.bool,\n  icon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  focusable: PropTypes.bool,\n  selectable: PropTypes.bool,\n  disabled: PropTypes.bool,\n  multiple: PropTypes.bool,\n  checkable: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n  checkStrictly: PropTypes.bool,\n  draggable: PropTypes.bool,\n  defaultExpandParent: PropTypes.bool,\n  autoExpandParent: PropTypes.bool,\n  defaultExpandAll: PropTypes.bool,\n  defaultExpandedKeys: PropTypes.arrayOf(PropTypes.string),\n  expandedKeys: PropTypes.arrayOf(PropTypes.string),\n  defaultCheckedKeys: PropTypes.arrayOf(PropTypes.string),\n  checkedKeys: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])), PropTypes.object]),\n  defaultSelectedKeys: PropTypes.arrayOf(PropTypes.string),\n  selectedKeys: PropTypes.arrayOf(PropTypes.string),\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onExpand: PropTypes.func,\n  onCheck: PropTypes.func,\n  onSelect: PropTypes.func,\n  onLoad: PropTypes.func,\n  loadData: PropTypes.func,\n  loadedKeys: PropTypes.arrayOf(PropTypes.string),\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onRightClick: PropTypes.func,\n  onDragStart: PropTypes.func,\n  onDragEnter: PropTypes.func,\n  onDragOver: PropTypes.func,\n  onDragLeave: PropTypes.func,\n  onDragEnd: PropTypes.func,\n  onDrop: PropTypes.func,\n  filterTreeNode: PropTypes.func,\n  openTransitionName: PropTypes.string,\n  openAnimation: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  switcherIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func])\n};\nTree.childContextTypes = treeContextTypes;\nTree.defaultProps = {\n  prefixCls: 'rc-tree',\n  showLine: false,\n  showIcon: true,\n  selectable: true,\n  multiple: false,\n  checkable: false,\n  disabled: false,\n  checkStrictly: false,\n  draggable: false,\n  defaultExpandParent: true,\n  autoExpandParent: false,\n  defaultExpandAll: false,\n  defaultExpandedKeys: [],\n  defaultCheckedKeys: [],\n  defaultSelectedKeys: []\n};\n\n\npolyfill(Tree);\n\nexport default Tree;"]},"metadata":{},"sourceType":"module"}