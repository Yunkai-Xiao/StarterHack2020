{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport warning from 'warning';\nimport { convertDataToTree as rcConvertDataToTree, convertTreeToEntities as rcConvertTreeToEntities, conductCheck as rcConductCheck } from \"rc-tree/es/util\";\nimport toNodeArray from \"rc-util/es/Children/toArray\";\nimport { hasClass } from \"rc-util/es/Dom/class\";\nimport SelectNode from './SelectNode';\nimport { SHOW_CHILD, SHOW_PARENT } from './strategies';\nvar warnDeprecatedLabel = false; // =================== DOM =====================\n\nexport function findPopupContainer(node, prefixClass) {\n  var current = node;\n\n  while (current) {\n    if (hasClass(current, prefixClass)) {\n      return current;\n    }\n\n    current = current.parentNode;\n  }\n\n  return null;\n} // =================== MISC ====================\n\nexport function toTitle(title) {\n  if (typeof title === 'string') {\n    return title;\n  }\n\n  return null;\n}\nexport function toArray(data) {\n  if (data === undefined || data === null) return [];\n  return Array.isArray(data) ? data : [data];\n} // Shallow copy of React 16.3 createRef api\n\nexport function createRef() {\n  var func = function setRef(node) {\n    func.current = node;\n  };\n\n  return func;\n} // =============== Legacy ===============\n\nexport var UNSELECTABLE_STYLE = {\n  userSelect: 'none',\n  WebkitUserSelect: 'none'\n};\nexport var UNSELECTABLE_ATTRIBUTE = {\n  unselectable: 'unselectable'\n};\n/**\n * Convert position list to hierarchy structure.\n * This is little hack since use '-' to split the position.\n */\n\nexport function flatToHierarchy(positionList) {\n  if (!positionList.length) {\n    return [];\n  }\n\n  var entrances = {}; // Prepare the position map\n\n  var posMap = {};\n  var parsedList = positionList.slice().map(function (entity) {\n    var clone = _objectSpread({}, entity, {\n      fields: entity.pos.split('-')\n    });\n\n    delete clone.children;\n    return clone;\n  });\n  parsedList.forEach(function (entity) {\n    posMap[entity.pos] = entity;\n  });\n  parsedList.sort(function (a, b) {\n    return a.fields.length - b.fields.length;\n  }); // Create the hierarchy\n\n  parsedList.forEach(function (entity) {\n    var parentPos = entity.fields.slice(0, -1).join('-');\n    var parentEntity = posMap[parentPos];\n\n    if (!parentEntity) {\n      entrances[entity.pos] = entity;\n    } else {\n      parentEntity.children = parentEntity.children || [];\n      parentEntity.children.push(entity);\n    } // Some time position list provide `key`, we don't need it\n\n\n    delete entity.key;\n    delete entity.fields;\n  });\n  return Object.keys(entrances).map(function (key) {\n    return entrances[key];\n  });\n} // =============== Accessibility ===============\n\nvar ariaId = 0;\nexport function resetAriaId() {\n  ariaId = 0;\n}\nexport function generateAriaId(prefix) {\n  ariaId += 1;\n  return \"\".concat(prefix, \"_\").concat(ariaId);\n}\nexport function isLabelInValue(props) {\n  var treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      labelInValue = props.labelInValue;\n\n  if (treeCheckable && treeCheckStrictly) {\n    return true;\n  }\n\n  return labelInValue || false;\n} // =================== Tree ====================\n\nexport function parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n      pId = _ref.pId,\n      rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = _objectSpread({}, node);\n\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Detect if position has relation.\n * e.g. 1-2 related with 1-2-3\n * e.g. 1-3-2 related with 1\n * e.g. 1-2 not related with 1-21\n */\n\nexport function isPosRelated(pos1, pos2) {\n  var fields1 = pos1.split('-');\n  var fields2 = pos2.split('-');\n  var minLen = Math.min(fields1.length, fields2.length);\n\n  for (var i = 0; i < minLen; i += 1) {\n    if (fields1[i] !== fields2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * This function is only used on treeNode check (none treeCheckStrictly but has searchInput).\n * We convert entity to { node, pos, children } format.\n * This is legacy bug but we still need to do with it.\n * @param entity\n */\n\nexport function cleanEntity(_ref2) {\n  var node = _ref2.node,\n      pos = _ref2.pos,\n      children = _ref2.children;\n  var instance = {\n    node: node,\n    pos: pos\n  };\n\n  if (children) {\n    instance.children = children.map(cleanEntity);\n  }\n\n  return instance;\n}\n/**\n * Get a filtered TreeNode list by provided treeNodes.\n * [Legacy] Since `Tree` use `key` as map but `key` will changed by React,\n * we have to convert `treeNodes > data > treeNodes` to keep the key.\n * Such performance hungry!\n */\n\nexport function getFilterTree(treeNodes, searchValue, filterFunc, valueEntities) {\n  if (!searchValue) {\n    return null;\n  }\n\n  function mapFilteredNodeToData(node) {\n    if (!node) return null;\n    var match = false;\n\n    if (filterFunc(searchValue, node)) {\n      match = true;\n    }\n\n    var children = toNodeArray(node.props.children).map(mapFilteredNodeToData).filter(function (n) {\n      return n;\n    });\n\n    if (children.length || match) {\n      return React.createElement(SelectNode, _extends({}, node.props, {\n        key: valueEntities[node.props.value].key\n      }), children);\n    }\n\n    return null;\n  }\n\n  return treeNodes.map(mapFilteredNodeToData).filter(function (node) {\n    return node;\n  });\n} // =================== Value ===================\n\n/**\n * Convert value to array format to make logic simplify.\n */\n\nexport function formatInternalValue(value, props) {\n  var valueList = toArray(value); // Parse label in value\n\n  if (isLabelInValue(props)) {\n    return valueList.map(function (val) {\n      if (typeof val !== 'object' || !val) {\n        return {\n          value: '',\n          label: ''\n        };\n      }\n\n      return val;\n    });\n  }\n\n  return valueList.map(function (val) {\n    return {\n      value: val\n    };\n  });\n}\nexport function getLabel(wrappedValue, entity, treeNodeLabelProp) {\n  if (wrappedValue.label) {\n    return wrappedValue.label;\n  }\n\n  if (entity && entity.node.props) {\n    return entity.node.props[treeNodeLabelProp];\n  } // Since value without entity will be in missValueList.\n  // This code will never reached, but we still need this in case.\n\n\n  return wrappedValue.value;\n}\n/**\n * Convert internal state `valueList` to user needed value list.\n * This will return an array list. You need check if is not multiple when return.\n *\n * `allCheckedNodes` is used for `treeCheckStrictly`\n */\n\nexport function formatSelectorValue(valueList, props, valueEntities) {\n  var treeNodeLabelProp = props.treeNodeLabelProp,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      showCheckedStrategy = props.showCheckedStrategy; // Will hide some value if `showCheckedStrategy` is set\n\n  if (treeCheckable && !treeCheckStrictly) {\n    var values = {};\n    valueList.forEach(function (wrappedValue) {\n      values[wrappedValue.value] = wrappedValue;\n    });\n    var hierarchyList = flatToHierarchy(valueList.map(function (_ref3) {\n      var value = _ref3.value;\n      return valueEntities[value];\n    }));\n\n    if (showCheckedStrategy === SHOW_PARENT) {\n      // Only get the parent checked value\n      return hierarchyList.map(function (_ref4) {\n        var value = _ref4.node.props.value;\n        return {\n          label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\n          value: value\n        };\n      });\n    }\n\n    if (showCheckedStrategy === SHOW_CHILD) {\n      // Only get the children checked value\n      var targetValueList = []; // Find the leaf children\n\n      var traverse = function traverse(_ref5) {\n        var value = _ref5.node.props.value,\n            children = _ref5.children;\n\n        if (!children || children.length === 0) {\n          targetValueList.push({\n            label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\n            value: value\n          });\n          return;\n        }\n\n        children.forEach(function (entity) {\n          traverse(entity);\n        });\n      };\n\n      hierarchyList.forEach(function (entity) {\n        traverse(entity);\n      });\n      return targetValueList;\n    }\n  }\n\n  return valueList.map(function (wrappedValue) {\n    return {\n      label: getLabel(wrappedValue, valueEntities[wrappedValue.value], treeNodeLabelProp),\n      value: wrappedValue.value\n    };\n  });\n}\n/**\n * Use `rc-tree` convertDataToTree to convert treeData to TreeNodes.\n * This will change the label to title value\n */\n\nfunction processProps(props) {\n  var title = props.title,\n      label = props.label,\n      key = props.key,\n      value = props.value;\n\n  var cloneProps = _objectSpread({}, props); // Warning user not to use deprecated label prop.\n\n\n  if (label && !title) {\n    if (!warnDeprecatedLabel) {\n      warning(false, \"'label' in treeData is deprecated. Please use 'title' instead.\");\n      warnDeprecatedLabel = true;\n    }\n\n    cloneProps.title = label;\n  }\n\n  if (!key) {\n    cloneProps.key = value;\n  }\n\n  return cloneProps;\n}\n\nexport function convertDataToTree(treeData) {\n  return rcConvertDataToTree(treeData, {\n    processProps: processProps\n  });\n}\n/**\n * Use `rc-tree` convertTreeToEntities for entities calculation.\n * We have additional entities of `valueEntities`\n */\n\nfunction initWrapper(wrapper) {\n  return _objectSpread({}, wrapper, {\n    valueEntities: {}\n  });\n}\n\nfunction processEntity(entity, wrapper) {\n  var value = entity.node.props.value;\n  entity.value = value; // This should be empty, or will get error message.\n\n  var currentEntity = wrapper.valueEntities[value];\n\n  if (currentEntity) {\n    warning(false, \"Conflict! value of node '\".concat(entity.key, \"' (\").concat(value, \") has already used by node '\").concat(currentEntity.key, \"'.\"));\n  }\n\n  wrapper.valueEntities[value] = entity;\n}\n\nexport function convertTreeToEntities(treeNodes) {\n  return rcConvertTreeToEntities(treeNodes, {\n    initWrapper: initWrapper,\n    processEntity: processEntity\n  });\n}\n/**\n * https://github.com/ant-design/ant-design/issues/13328\n * We need calculate the half check key when searchValue is set.\n */\n// TODO: This logic may better move to rc-tree\n\nexport function getHalfCheckedKeys(valueList, valueEntities) {\n  var values = {}; // Fill checked keys\n\n  valueList.forEach(function (_ref6) {\n    var value = _ref6.value;\n    values[value] = false;\n  }); // Fill half checked keys\n\n  valueList.forEach(function (_ref7) {\n    var value = _ref7.value;\n    var current = valueEntities[value];\n\n    while (current && current.parent) {\n      var parentValue = current.parent.value;\n      if (parentValue in values) break;\n      values[parentValue] = true;\n      current = current.parent;\n    }\n  }); // Get half keys\n\n  return Object.keys(values).filter(function (value) {\n    return values[value];\n  }).map(function (value) {\n    return valueEntities[value].key;\n  });\n}\nexport var conductCheck = rcConductCheck;","map":{"version":3,"sources":["/Users/SHAWN/Downloads/StudyMate2/node_modules/rc-tree-select/es/util.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectSpread","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","_defineProperty","obj","value","defineProperty","configurable","writable","React","warning","convertDataToTree","rcConvertDataToTree","convertTreeToEntities","rcConvertTreeToEntities","conductCheck","rcConductCheck","toNodeArray","hasClass","SelectNode","SHOW_CHILD","SHOW_PARENT","warnDeprecatedLabel","findPopupContainer","node","prefixClass","current","parentNode","toTitle","title","toArray","data","undefined","Array","isArray","createRef","func","setRef","UNSELECTABLE_STYLE","userSelect","WebkitUserSelect","UNSELECTABLE_ATTRIBUTE","unselectable","flatToHierarchy","positionList","entrances","posMap","parsedList","slice","map","entity","clone","fields","pos","split","children","sort","a","b","parentPos","join","parentEntity","push","ariaId","resetAriaId","generateAriaId","prefix","isLabelInValue","props","treeCheckable","treeCheckStrictly","labelInValue","parseSimpleTreeData","treeData","_ref","id","pId","rootPId","keyNodes","rootNodeList","nodeList","parentKey","parent","isPosRelated","pos1","pos2","fields1","fields2","minLen","Math","min","cleanEntity","_ref2","instance","getFilterTree","treeNodes","searchValue","filterFunc","valueEntities","mapFilteredNodeToData","match","n","createElement","formatInternalValue","valueList","val","label","getLabel","wrappedValue","treeNodeLabelProp","formatSelectorValue","showCheckedStrategy","values","hierarchyList","_ref3","_ref4","targetValueList","traverse","_ref5","processProps","cloneProps","initWrapper","wrapper","processEntity","currentEntity","getHalfCheckedKeys","_ref6","_ref7","parentValue"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport warning from 'warning';\nimport { convertDataToTree as rcConvertDataToTree, convertTreeToEntities as rcConvertTreeToEntities, conductCheck as rcConductCheck } from \"rc-tree/es/util\";\nimport toNodeArray from \"rc-util/es/Children/toArray\";\nimport { hasClass } from \"rc-util/es/Dom/class\";\nimport SelectNode from './SelectNode';\nimport { SHOW_CHILD, SHOW_PARENT } from './strategies';\nvar warnDeprecatedLabel = false; // =================== DOM =====================\n\nexport function findPopupContainer(node, prefixClass) {\n  var current = node;\n\n  while (current) {\n    if (hasClass(current, prefixClass)) {\n      return current;\n    }\n\n    current = current.parentNode;\n  }\n\n  return null;\n} // =================== MISC ====================\n\nexport function toTitle(title) {\n  if (typeof title === 'string') {\n    return title;\n  }\n\n  return null;\n}\nexport function toArray(data) {\n  if (data === undefined || data === null) return [];\n  return Array.isArray(data) ? data : [data];\n} // Shallow copy of React 16.3 createRef api\n\nexport function createRef() {\n  var func = function setRef(node) {\n    func.current = node;\n  };\n\n  return func;\n} // =============== Legacy ===============\n\nexport var UNSELECTABLE_STYLE = {\n  userSelect: 'none',\n  WebkitUserSelect: 'none'\n};\nexport var UNSELECTABLE_ATTRIBUTE = {\n  unselectable: 'unselectable'\n};\n/**\n * Convert position list to hierarchy structure.\n * This is little hack since use '-' to split the position.\n */\n\nexport function flatToHierarchy(positionList) {\n  if (!positionList.length) {\n    return [];\n  }\n\n  var entrances = {}; // Prepare the position map\n\n  var posMap = {};\n  var parsedList = positionList.slice().map(function (entity) {\n    var clone = _objectSpread({}, entity, {\n      fields: entity.pos.split('-')\n    });\n\n    delete clone.children;\n    return clone;\n  });\n  parsedList.forEach(function (entity) {\n    posMap[entity.pos] = entity;\n  });\n  parsedList.sort(function (a, b) {\n    return a.fields.length - b.fields.length;\n  }); // Create the hierarchy\n\n  parsedList.forEach(function (entity) {\n    var parentPos = entity.fields.slice(0, -1).join('-');\n    var parentEntity = posMap[parentPos];\n\n    if (!parentEntity) {\n      entrances[entity.pos] = entity;\n    } else {\n      parentEntity.children = parentEntity.children || [];\n      parentEntity.children.push(entity);\n    } // Some time position list provide `key`, we don't need it\n\n\n    delete entity.key;\n    delete entity.fields;\n  });\n  return Object.keys(entrances).map(function (key) {\n    return entrances[key];\n  });\n} // =============== Accessibility ===============\n\nvar ariaId = 0;\nexport function resetAriaId() {\n  ariaId = 0;\n}\nexport function generateAriaId(prefix) {\n  ariaId += 1;\n  return \"\".concat(prefix, \"_\").concat(ariaId);\n}\nexport function isLabelInValue(props) {\n  var treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      labelInValue = props.labelInValue;\n\n  if (treeCheckable && treeCheckStrictly) {\n    return true;\n  }\n\n  return labelInValue || false;\n} // =================== Tree ====================\n\nexport function parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n      pId = _ref.pId,\n      rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = _objectSpread({}, node);\n\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Detect if position has relation.\n * e.g. 1-2 related with 1-2-3\n * e.g. 1-3-2 related with 1\n * e.g. 1-2 not related with 1-21\n */\n\nexport function isPosRelated(pos1, pos2) {\n  var fields1 = pos1.split('-');\n  var fields2 = pos2.split('-');\n  var minLen = Math.min(fields1.length, fields2.length);\n\n  for (var i = 0; i < minLen; i += 1) {\n    if (fields1[i] !== fields2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * This function is only used on treeNode check (none treeCheckStrictly but has searchInput).\n * We convert entity to { node, pos, children } format.\n * This is legacy bug but we still need to do with it.\n * @param entity\n */\n\nexport function cleanEntity(_ref2) {\n  var node = _ref2.node,\n      pos = _ref2.pos,\n      children = _ref2.children;\n  var instance = {\n    node: node,\n    pos: pos\n  };\n\n  if (children) {\n    instance.children = children.map(cleanEntity);\n  }\n\n  return instance;\n}\n/**\n * Get a filtered TreeNode list by provided treeNodes.\n * [Legacy] Since `Tree` use `key` as map but `key` will changed by React,\n * we have to convert `treeNodes > data > treeNodes` to keep the key.\n * Such performance hungry!\n */\n\nexport function getFilterTree(treeNodes, searchValue, filterFunc, valueEntities) {\n  if (!searchValue) {\n    return null;\n  }\n\n  function mapFilteredNodeToData(node) {\n    if (!node) return null;\n    var match = false;\n\n    if (filterFunc(searchValue, node)) {\n      match = true;\n    }\n\n    var children = toNodeArray(node.props.children).map(mapFilteredNodeToData).filter(function (n) {\n      return n;\n    });\n\n    if (children.length || match) {\n      return React.createElement(SelectNode, _extends({}, node.props, {\n        key: valueEntities[node.props.value].key\n      }), children);\n    }\n\n    return null;\n  }\n\n  return treeNodes.map(mapFilteredNodeToData).filter(function (node) {\n    return node;\n  });\n} // =================== Value ===================\n\n/**\n * Convert value to array format to make logic simplify.\n */\n\nexport function formatInternalValue(value, props) {\n  var valueList = toArray(value); // Parse label in value\n\n  if (isLabelInValue(props)) {\n    return valueList.map(function (val) {\n      if (typeof val !== 'object' || !val) {\n        return {\n          value: '',\n          label: ''\n        };\n      }\n\n      return val;\n    });\n  }\n\n  return valueList.map(function (val) {\n    return {\n      value: val\n    };\n  });\n}\nexport function getLabel(wrappedValue, entity, treeNodeLabelProp) {\n  if (wrappedValue.label) {\n    return wrappedValue.label;\n  }\n\n  if (entity && entity.node.props) {\n    return entity.node.props[treeNodeLabelProp];\n  } // Since value without entity will be in missValueList.\n  // This code will never reached, but we still need this in case.\n\n\n  return wrappedValue.value;\n}\n/**\n * Convert internal state `valueList` to user needed value list.\n * This will return an array list. You need check if is not multiple when return.\n *\n * `allCheckedNodes` is used for `treeCheckStrictly`\n */\n\nexport function formatSelectorValue(valueList, props, valueEntities) {\n  var treeNodeLabelProp = props.treeNodeLabelProp,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      showCheckedStrategy = props.showCheckedStrategy; // Will hide some value if `showCheckedStrategy` is set\n\n  if (treeCheckable && !treeCheckStrictly) {\n    var values = {};\n    valueList.forEach(function (wrappedValue) {\n      values[wrappedValue.value] = wrappedValue;\n    });\n    var hierarchyList = flatToHierarchy(valueList.map(function (_ref3) {\n      var value = _ref3.value;\n      return valueEntities[value];\n    }));\n\n    if (showCheckedStrategy === SHOW_PARENT) {\n      // Only get the parent checked value\n      return hierarchyList.map(function (_ref4) {\n        var value = _ref4.node.props.value;\n        return {\n          label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\n          value: value\n        };\n      });\n    }\n\n    if (showCheckedStrategy === SHOW_CHILD) {\n      // Only get the children checked value\n      var targetValueList = []; // Find the leaf children\n\n      var traverse = function traverse(_ref5) {\n        var value = _ref5.node.props.value,\n            children = _ref5.children;\n\n        if (!children || children.length === 0) {\n          targetValueList.push({\n            label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\n            value: value\n          });\n          return;\n        }\n\n        children.forEach(function (entity) {\n          traverse(entity);\n        });\n      };\n\n      hierarchyList.forEach(function (entity) {\n        traverse(entity);\n      });\n      return targetValueList;\n    }\n  }\n\n  return valueList.map(function (wrappedValue) {\n    return {\n      label: getLabel(wrappedValue, valueEntities[wrappedValue.value], treeNodeLabelProp),\n      value: wrappedValue.value\n    };\n  });\n}\n/**\n * Use `rc-tree` convertDataToTree to convert treeData to TreeNodes.\n * This will change the label to title value\n */\n\nfunction processProps(props) {\n  var title = props.title,\n      label = props.label,\n      key = props.key,\n      value = props.value;\n\n  var cloneProps = _objectSpread({}, props); // Warning user not to use deprecated label prop.\n\n\n  if (label && !title) {\n    if (!warnDeprecatedLabel) {\n      warning(false, \"'label' in treeData is deprecated. Please use 'title' instead.\");\n      warnDeprecatedLabel = true;\n    }\n\n    cloneProps.title = label;\n  }\n\n  if (!key) {\n    cloneProps.key = value;\n  }\n\n  return cloneProps;\n}\n\nexport function convertDataToTree(treeData) {\n  return rcConvertDataToTree(treeData, {\n    processProps: processProps\n  });\n}\n/**\n * Use `rc-tree` convertTreeToEntities for entities calculation.\n * We have additional entities of `valueEntities`\n */\n\nfunction initWrapper(wrapper) {\n  return _objectSpread({}, wrapper, {\n    valueEntities: {}\n  });\n}\n\nfunction processEntity(entity, wrapper) {\n  var value = entity.node.props.value;\n  entity.value = value; // This should be empty, or will get error message.\n\n  var currentEntity = wrapper.valueEntities[value];\n\n  if (currentEntity) {\n    warning(false, \"Conflict! value of node '\".concat(entity.key, \"' (\").concat(value, \") has already used by node '\").concat(currentEntity.key, \"'.\"));\n  }\n\n  wrapper.valueEntities[value] = entity;\n}\n\nexport function convertTreeToEntities(treeNodes) {\n  return rcConvertTreeToEntities(treeNodes, {\n    initWrapper: initWrapper,\n    processEntity: processEntity\n  });\n}\n/**\n * https://github.com/ant-design/ant-design/issues/13328\n * We need calculate the half check key when searchValue is set.\n */\n// TODO: This logic may better move to rc-tree\n\nexport function getHalfCheckedKeys(valueList, valueEntities) {\n  var values = {}; // Fill checked keys\n\n  valueList.forEach(function (_ref6) {\n    var value = _ref6.value;\n    values[value] = false;\n  }); // Fill half checked keys\n\n  valueList.forEach(function (_ref7) {\n    var value = _ref7.value;\n    var current = valueEntities[value];\n\n    while (current && current.parent) {\n      var parentValue = current.parent.value;\n      if (parentValue in values) break;\n      values[parentValue] = true;\n      current = current.parent;\n    }\n  }); // Get half keys\n\n  return Object.keys(values).filter(function (value) {\n    return values[value];\n  }).map(function (value) {\n    return valueEntities[value].key;\n  });\n}\nexport var conductCheck = rcConductCheck;"]},"metadata":{},"sourceType":"module"}