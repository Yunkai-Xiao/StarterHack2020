{"ast":null,"code":"import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport React from 'react';\n\nvar ColumnManager = function () {\n  function ColumnManager(columns, elements) {\n    _classCallCheck(this, ColumnManager);\n\n    this._cached = {};\n    this.columns = columns || this.normalize(elements);\n  }\n\n  _createClass(ColumnManager, [{\n    key: 'isAnyColumnsFixed',\n    value: function isAnyColumnsFixed() {\n      var _this = this;\n\n      return this._cache('isAnyColumnsFixed', function () {\n        return _this.columns.some(function (column) {\n          return !!column.fixed;\n        });\n      });\n    }\n  }, {\n    key: 'isAnyColumnsLeftFixed',\n    value: function isAnyColumnsLeftFixed() {\n      var _this2 = this;\n\n      return this._cache('isAnyColumnsLeftFixed', function () {\n        return _this2.columns.some(function (column) {\n          return column.fixed === 'left' || column.fixed === true;\n        });\n      });\n    }\n  }, {\n    key: 'isAnyColumnsRightFixed',\n    value: function isAnyColumnsRightFixed() {\n      var _this3 = this;\n\n      return this._cache('isAnyColumnsRightFixed', function () {\n        return _this3.columns.some(function (column) {\n          return column.fixed === 'right';\n        });\n      });\n    }\n  }, {\n    key: 'leftColumns',\n    value: function leftColumns() {\n      var _this4 = this;\n\n      return this._cache('leftColumns', function () {\n        return _this4.groupedColumns().filter(function (column) {\n          return column.fixed === 'left' || column.fixed === true;\n        });\n      });\n    }\n  }, {\n    key: 'rightColumns',\n    value: function rightColumns() {\n      var _this5 = this;\n\n      return this._cache('rightColumns', function () {\n        return _this5.groupedColumns().filter(function (column) {\n          return column.fixed === 'right';\n        });\n      });\n    }\n  }, {\n    key: 'leafColumns',\n    value: function leafColumns() {\n      var _this6 = this;\n\n      return this._cache('leafColumns', function () {\n        return _this6._leafColumns(_this6.columns);\n      });\n    }\n  }, {\n    key: 'leftLeafColumns',\n    value: function leftLeafColumns() {\n      var _this7 = this;\n\n      return this._cache('leftLeafColumns', function () {\n        return _this7._leafColumns(_this7.leftColumns());\n      });\n    }\n  }, {\n    key: 'rightLeafColumns',\n    value: function rightLeafColumns() {\n      var _this8 = this;\n\n      return this._cache('rightLeafColumns', function () {\n        return _this8._leafColumns(_this8.rightColumns());\n      });\n    } // add appropriate rowspan and colspan to column\n\n  }, {\n    key: 'groupedColumns',\n    value: function groupedColumns() {\n      var _this9 = this;\n\n      return this._cache('groupedColumns', function () {\n        var _groupColumns = function _groupColumns(columns) {\n          var currentRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n          var parentColumn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n          var rows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : []; // track how many rows we got\n\n          rows[currentRow] = rows[currentRow] || [];\n          var grouped = [];\n\n          var setRowSpan = function setRowSpan(column) {\n            var rowSpan = rows.length - currentRow;\n\n            if (column && !column.children && // parent columns are supposed to be one row\n            rowSpan > 1 && (!column.rowSpan || column.rowSpan < rowSpan)) {\n              column.rowSpan = rowSpan;\n            }\n          };\n\n          columns.forEach(function (column, index) {\n            var newColumn = _extends({}, column);\n\n            rows[currentRow].push(newColumn);\n            parentColumn.colSpan = parentColumn.colSpan || 0;\n\n            if (newColumn.children && newColumn.children.length > 0) {\n              newColumn.children = _groupColumns(newColumn.children, currentRow + 1, newColumn, rows);\n              parentColumn.colSpan += newColumn.colSpan;\n            } else {\n              parentColumn.colSpan++;\n            } // update rowspan to all same row columns\n\n\n            for (var i = 0; i < rows[currentRow].length - 1; ++i) {\n              setRowSpan(rows[currentRow][i]);\n            } // last column, update rowspan immediately\n\n\n            if (index + 1 === columns.length) {\n              setRowSpan(newColumn);\n            }\n\n            grouped.push(newColumn);\n          });\n          return grouped;\n        };\n\n        return _groupColumns(_this9.columns);\n      });\n    }\n  }, {\n    key: 'normalize',\n    value: function normalize(elements) {\n      var _this10 = this;\n\n      var columns = [];\n      React.Children.forEach(elements, function (element) {\n        if (!React.isValidElement(element)) {\n          return;\n        }\n\n        var column = _extends({}, element.props);\n\n        if (element.key) {\n          column.key = element.key;\n        }\n\n        if (element.type.isTableColumnGroup) {\n          column.children = _this10.normalize(column.children);\n        }\n\n        columns.push(column);\n      });\n      return columns;\n    }\n  }, {\n    key: 'reset',\n    value: function reset(columns, elements) {\n      this.columns = columns || this.normalize(elements);\n      this._cached = {};\n    }\n  }, {\n    key: '_cache',\n    value: function _cache(name, fn) {\n      if (name in this._cached) {\n        return this._cached[name];\n      }\n\n      this._cached[name] = fn();\n      return this._cached[name];\n    }\n  }, {\n    key: '_leafColumns',\n    value: function _leafColumns(columns) {\n      var _this11 = this;\n\n      var leafColumns = [];\n      columns.forEach(function (column) {\n        if (!column.children) {\n          leafColumns.push(column);\n        } else {\n          leafColumns.push.apply(leafColumns, _toConsumableArray(_this11._leafColumns(column.children)));\n        }\n      });\n      return leafColumns;\n    }\n  }]);\n\n  return ColumnManager;\n}();\n\nexport default ColumnManager;","map":{"version":3,"sources":["/Users/SHAWN/Downloads/StudyMate2/node_modules/rc-table/es/ColumnManager.js"],"names":["_toConsumableArray","_extends","_classCallCheck","_createClass","React","ColumnManager","columns","elements","_cached","normalize","key","value","isAnyColumnsFixed","_this","_cache","some","column","fixed","isAnyColumnsLeftFixed","_this2","isAnyColumnsRightFixed","_this3","leftColumns","_this4","groupedColumns","filter","rightColumns","_this5","leafColumns","_this6","_leafColumns","leftLeafColumns","_this7","rightLeafColumns","_this8","_this9","_groupColumns","currentRow","arguments","length","undefined","parentColumn","rows","grouped","setRowSpan","rowSpan","children","forEach","index","newColumn","push","colSpan","i","_this10","Children","element","isValidElement","props","type","isTableColumnGroup","reset","name","fn","_this11","apply"],"mappings":"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","sourcesContent":["import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport React from 'react';\n\nvar ColumnManager = function () {\n  function ColumnManager(columns, elements) {\n    _classCallCheck(this, ColumnManager);\n\n    this._cached = {};\n\n    this.columns = columns || this.normalize(elements);\n  }\n\n  _createClass(ColumnManager, [{\n    key: 'isAnyColumnsFixed',\n    value: function isAnyColumnsFixed() {\n      var _this = this;\n\n      return this._cache('isAnyColumnsFixed', function () {\n        return _this.columns.some(function (column) {\n          return !!column.fixed;\n        });\n      });\n    }\n  }, {\n    key: 'isAnyColumnsLeftFixed',\n    value: function isAnyColumnsLeftFixed() {\n      var _this2 = this;\n\n      return this._cache('isAnyColumnsLeftFixed', function () {\n        return _this2.columns.some(function (column) {\n          return column.fixed === 'left' || column.fixed === true;\n        });\n      });\n    }\n  }, {\n    key: 'isAnyColumnsRightFixed',\n    value: function isAnyColumnsRightFixed() {\n      var _this3 = this;\n\n      return this._cache('isAnyColumnsRightFixed', function () {\n        return _this3.columns.some(function (column) {\n          return column.fixed === 'right';\n        });\n      });\n    }\n  }, {\n    key: 'leftColumns',\n    value: function leftColumns() {\n      var _this4 = this;\n\n      return this._cache('leftColumns', function () {\n        return _this4.groupedColumns().filter(function (column) {\n          return column.fixed === 'left' || column.fixed === true;\n        });\n      });\n    }\n  }, {\n    key: 'rightColumns',\n    value: function rightColumns() {\n      var _this5 = this;\n\n      return this._cache('rightColumns', function () {\n        return _this5.groupedColumns().filter(function (column) {\n          return column.fixed === 'right';\n        });\n      });\n    }\n  }, {\n    key: 'leafColumns',\n    value: function leafColumns() {\n      var _this6 = this;\n\n      return this._cache('leafColumns', function () {\n        return _this6._leafColumns(_this6.columns);\n      });\n    }\n  }, {\n    key: 'leftLeafColumns',\n    value: function leftLeafColumns() {\n      var _this7 = this;\n\n      return this._cache('leftLeafColumns', function () {\n        return _this7._leafColumns(_this7.leftColumns());\n      });\n    }\n  }, {\n    key: 'rightLeafColumns',\n    value: function rightLeafColumns() {\n      var _this8 = this;\n\n      return this._cache('rightLeafColumns', function () {\n        return _this8._leafColumns(_this8.rightColumns());\n      });\n    }\n\n    // add appropriate rowspan and colspan to column\n\n  }, {\n    key: 'groupedColumns',\n    value: function groupedColumns() {\n      var _this9 = this;\n\n      return this._cache('groupedColumns', function () {\n        var _groupColumns = function _groupColumns(columns) {\n          var currentRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n          var parentColumn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n          var rows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n          // track how many rows we got\n          rows[currentRow] = rows[currentRow] || [];\n          var grouped = [];\n          var setRowSpan = function setRowSpan(column) {\n            var rowSpan = rows.length - currentRow;\n            if (column && !column.children && // parent columns are supposed to be one row\n            rowSpan > 1 && (!column.rowSpan || column.rowSpan < rowSpan)) {\n              column.rowSpan = rowSpan;\n            }\n          };\n          columns.forEach(function (column, index) {\n            var newColumn = _extends({}, column);\n            rows[currentRow].push(newColumn);\n            parentColumn.colSpan = parentColumn.colSpan || 0;\n            if (newColumn.children && newColumn.children.length > 0) {\n              newColumn.children = _groupColumns(newColumn.children, currentRow + 1, newColumn, rows);\n              parentColumn.colSpan += newColumn.colSpan;\n            } else {\n              parentColumn.colSpan++;\n            }\n            // update rowspan to all same row columns\n            for (var i = 0; i < rows[currentRow].length - 1; ++i) {\n              setRowSpan(rows[currentRow][i]);\n            }\n            // last column, update rowspan immediately\n            if (index + 1 === columns.length) {\n              setRowSpan(newColumn);\n            }\n            grouped.push(newColumn);\n          });\n          return grouped;\n        };\n        return _groupColumns(_this9.columns);\n      });\n    }\n  }, {\n    key: 'normalize',\n    value: function normalize(elements) {\n      var _this10 = this;\n\n      var columns = [];\n      React.Children.forEach(elements, function (element) {\n        if (!React.isValidElement(element)) {\n          return;\n        }\n        var column = _extends({}, element.props);\n        if (element.key) {\n          column.key = element.key;\n        }\n        if (element.type.isTableColumnGroup) {\n          column.children = _this10.normalize(column.children);\n        }\n        columns.push(column);\n      });\n      return columns;\n    }\n  }, {\n    key: 'reset',\n    value: function reset(columns, elements) {\n      this.columns = columns || this.normalize(elements);\n      this._cached = {};\n    }\n  }, {\n    key: '_cache',\n    value: function _cache(name, fn) {\n      if (name in this._cached) {\n        return this._cached[name];\n      }\n      this._cached[name] = fn();\n      return this._cached[name];\n    }\n  }, {\n    key: '_leafColumns',\n    value: function _leafColumns(columns) {\n      var _this11 = this;\n\n      var leafColumns = [];\n      columns.forEach(function (column) {\n        if (!column.children) {\n          leafColumns.push(column);\n        } else {\n          leafColumns.push.apply(leafColumns, _toConsumableArray(_this11._leafColumns(column.children)));\n        }\n      });\n      return leafColumns;\n    }\n  }]);\n\n  return ColumnManager;\n}();\n\nexport default ColumnManager;"]},"metadata":{},"sourceType":"module"}