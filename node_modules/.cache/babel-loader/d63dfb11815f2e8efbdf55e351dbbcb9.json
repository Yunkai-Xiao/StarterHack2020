{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nexport default function ColGroup(props, _ref) {\n  var table = _ref.table;\n  var _table$props = table.props,\n      prefixCls = _table$props.prefixCls,\n      expandIconAsCell = _table$props.expandIconAsCell;\n  var fixed = props.fixed;\n  var cols = [];\n\n  if (expandIconAsCell && fixed !== 'right') {\n    cols.push(React.createElement('col', {\n      className: prefixCls + '-expand-icon-col',\n      key: 'rc-table-expand-icon-col'\n    }));\n  }\n\n  var leafColumns = void 0;\n\n  if (fixed === 'left') {\n    leafColumns = table.columnManager.leftLeafColumns();\n  } else if (fixed === 'right') {\n    leafColumns = table.columnManager.rightLeafColumns();\n  } else {\n    leafColumns = table.columnManager.leafColumns();\n  }\n\n  cols = cols.concat(leafColumns.map(function (c) {\n    return React.createElement('col', {\n      key: c.key || c.dataIndex,\n      style: {\n        width: c.width,\n        minWidth: c.width\n      }\n    });\n  }));\n  return React.createElement('colgroup', null, cols);\n}\nColGroup.propTypes = {\n  fixed: PropTypes.string\n};\nColGroup.contextTypes = {\n  table: PropTypes.any\n};","map":{"version":3,"sources":["/Users/SHAWN/Downloads/StudyMate2/node_modules/rc-table/es/ColGroup.js"],"names":["React","PropTypes","ColGroup","props","_ref","table","_table$props","prefixCls","expandIconAsCell","fixed","cols","push","createElement","className","key","leafColumns","columnManager","leftLeafColumns","rightLeafColumns","concat","map","c","dataIndex","style","width","minWidth","propTypes","string","contextTypes","any"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,IAAzB,EAA+B;AAC5C,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AACA,MAAIC,YAAY,GAAGD,KAAK,CAACF,KAAzB;AAAA,MACII,SAAS,GAAGD,YAAY,CAACC,SAD7B;AAAA,MAEIC,gBAAgB,GAAGF,YAAY,CAACE,gBAFpC;AAGA,MAAIC,KAAK,GAAGN,KAAK,CAACM,KAAlB;AAGA,MAAIC,IAAI,GAAG,EAAX;;AAEA,MAAIF,gBAAgB,IAAIC,KAAK,KAAK,OAAlC,EAA2C;AACzCC,IAAAA,IAAI,CAACC,IAAL,CAAUX,KAAK,CAACY,aAAN,CAAoB,KAApB,EAA2B;AAAEC,MAAAA,SAAS,EAAEN,SAAS,GAAG,kBAAzB;AAA6CO,MAAAA,GAAG,EAAE;AAAlD,KAA3B,CAAV;AACD;;AAED,MAAIC,WAAW,GAAG,KAAK,CAAvB;;AAEA,MAAIN,KAAK,KAAK,MAAd,EAAsB;AACpBM,IAAAA,WAAW,GAAGV,KAAK,CAACW,aAAN,CAAoBC,eAApB,EAAd;AACD,GAFD,MAEO,IAAIR,KAAK,KAAK,OAAd,EAAuB;AAC5BM,IAAAA,WAAW,GAAGV,KAAK,CAACW,aAAN,CAAoBE,gBAApB,EAAd;AACD,GAFM,MAEA;AACLH,IAAAA,WAAW,GAAGV,KAAK,CAACW,aAAN,CAAoBD,WAApB,EAAd;AACD;;AACDL,EAAAA,IAAI,GAAGA,IAAI,CAACS,MAAL,CAAYJ,WAAW,CAACK,GAAZ,CAAgB,UAAUC,CAAV,EAAa;AAC9C,WAAOrB,KAAK,CAACY,aAAN,CAAoB,KAApB,EAA2B;AAAEE,MAAAA,GAAG,EAAEO,CAAC,CAACP,GAAF,IAASO,CAAC,CAACC,SAAlB;AAA6BC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAEH,CAAC,CAACG,KAAX;AAAkBC,QAAAA,QAAQ,EAAEJ,CAAC,CAACG;AAA9B;AAApC,KAA3B,CAAP;AACD,GAFkB,CAAZ,CAAP;AAIA,SAAOxB,KAAK,CAACY,aAAN,CACL,UADK,EAEL,IAFK,EAGLF,IAHK,CAAP;AAKD;AAEDR,QAAQ,CAACwB,SAAT,GAAqB;AACnBjB,EAAAA,KAAK,EAAER,SAAS,CAAC0B;AADE,CAArB;AAIAzB,QAAQ,CAAC0B,YAAT,GAAwB;AACtBvB,EAAAA,KAAK,EAAEJ,SAAS,CAAC4B;AADK,CAAxB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function ColGroup(props, _ref) {\n  var table = _ref.table;\n  var _table$props = table.props,\n      prefixCls = _table$props.prefixCls,\n      expandIconAsCell = _table$props.expandIconAsCell;\n  var fixed = props.fixed;\n\n\n  var cols = [];\n\n  if (expandIconAsCell && fixed !== 'right') {\n    cols.push(React.createElement('col', { className: prefixCls + '-expand-icon-col', key: 'rc-table-expand-icon-col' }));\n  }\n\n  var leafColumns = void 0;\n\n  if (fixed === 'left') {\n    leafColumns = table.columnManager.leftLeafColumns();\n  } else if (fixed === 'right') {\n    leafColumns = table.columnManager.rightLeafColumns();\n  } else {\n    leafColumns = table.columnManager.leafColumns();\n  }\n  cols = cols.concat(leafColumns.map(function (c) {\n    return React.createElement('col', { key: c.key || c.dataIndex, style: { width: c.width, minWidth: c.width } });\n  }));\n\n  return React.createElement(\n    'colgroup',\n    null,\n    cols\n  );\n}\n\nColGroup.propTypes = {\n  fixed: PropTypes.string\n};\n\nColGroup.contextTypes = {\n  table: PropTypes.any\n};"]},"metadata":{},"sourceType":"module"}